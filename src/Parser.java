
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\050\005\000\002\056" +
    "\003\000\002\056\002\000\002\016\014\000\002\017\004" +
    "\000\002\017\002\000\002\014\007\000\002\014\005\000" +
    "\002\014\002\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\002\004\000\002\002\003\000" +
    "\002\062\005\000\002\063\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\005\000\002" +
    "\060\003\000\002\060\005\000\002\060\006\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\005\006\000\002\005\006\000\002\051\003\000" +
    "\002\051\002\000\002\007\006\000\002\057\003\000\002" +
    "\057\005\000\002\054\006\000\002\034\005\000\002\035" +
    "\007\000\002\035\002\000\002\027\005\000\002\036\005" +
    "\000\002\036\003\000\002\036\002\000\002\011\010\000" +
    "\002\012\006\000\002\012\006\000\002\052\004\000\002" +
    "\052\002\000\002\013\006\000\002\013\006\000\002\044" +
    "\011\000\002\046\005\000\002\046\003\000\002\045\003" +
    "\000\002\045\002\000\002\020\013\000\002\020\011\000" +
    "\002\022\004\000\002\022\005\000\002\023\005\000\002" +
    "\024\005\000\002\024\005\000\002\025\005\000\002\025" +
    "\005\000\002\026\004\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\007\000\002\032" +
    "\007\000\002\032\007\000\002\032\007\000\002\053\006" +
    "\000\002\053\006\000\002\047\007\000\002\043\004\000" +
    "\002\043\005\000\002\055\010\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\032\032\015\033\023\035\016\037\012\040" +
    "\030\041\006\045\021\064\020\065\ufffe\066\010\067\034" +
    "\071\035\001\002\000\044\002\uffe7\012\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\043\uffe7\045\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\071" +
    "\uffe7\001\002\000\046\002\uffef\012\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043" +
    "\uffef\045\uffef\053\345\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\071\uffef\001\002\000\004\045\325\001\002\000\004\065" +
    "\317\001\002\000\004\045\047\001\002\000\004\002\313" +
    "\001\002\000\004\045\276\001\002\000\004\053\273\001" +
    "\002\000\044\002\uffeb\012\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\045" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\071\uffeb\001\002" +
    "\000\024\020\201\021\202\022\205\024\204\026\206\027" +
    "\177\030\212\031\211\045\265\001\002\000\030\032\015" +
    "\033\023\035\016\037\012\040\030\041\006\045\021\064" +
    "\020\066\010\067\034\071\035\001\002\000\044\002\uffe2" +
    "\012\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\043\uffe2\045\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\071\uffe2\001\002\000\032\004\260\006" +
    "\052\011\044\013\053\015\046\017\045\023\064\025\061" +
    "\045\047\047\065\071\035\072\062\001\002\000\012\005" +
    "\252\013\171\053\uffce\073\172\001\002\000\004\004\251" +
    "\001\002\000\004\006\240\001\002\000\044\002\uffe9\012" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\043\uffe9\045\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\071\uffe9\001\002\000\044\002\uffdf\012\uffdf" +
    "\032\015\033\023\034\uffdf\035\016\036\uffdf\037\012\040" +
    "\030\041\006\043\uffdf\045\021\064\020\065\uffdf\066\010" +
    "\067\034\071\035\001\002\000\044\002\uffee\012\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\043\uffee\045\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\071\uffee\001\002\000\044\002\uffe5\012\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\043\uffe5\045\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\071\uffe5\001\002\000\006\004\235\023\234\001\002\000" +
    "\044\002\uffed\012\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed\045\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\071\uffed\001\002\000\044" +
    "\002\uffe1\012\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\043\uffe1\045\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\071\uffe1\001\002\000\044\002" +
    "\uffe4\012\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\043\uffe4\045\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\071\uffe4\001\002\000\030\006\052" +
    "\011\044\013\053\015\046\017\045\023\064\025\061\045" +
    "\047\047\065\071\035\072\062\001\002\000\030\006\052" +
    "\011\044\013\053\015\046\017\045\023\064\025\061\045" +
    "\047\047\065\071\035\072\062\001\002\000\006\002\uffff" +
    "\065\uffff\001\002\000\044\002\uffe6\012\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\043\uffe6\045\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\071" +
    "\uffe6\001\002\000\044\002\uffec\012\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043" +
    "\uffec\045\uffec\064\uffec\065\uffec\066\uffec\067\uffec\071\uffec" +
    "\001\002\000\044\002\uffe8\012\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8" +
    "\045\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\071\uffe8\001" +
    "\002\000\044\002\uffea\012\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea\045" +
    "\uffea\064\uffea\065\uffea\066\uffea\067\uffea\071\uffea\001\002" +
    "\000\052\004\uffda\007\uffda\010\uffda\014\uffda\016\151\044" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\054\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\070" +
    "\uffda\071\uffda\001\002\000\024\012\uffbd\020\201\021\202" +
    "\022\205\024\204\026\206\027\177\030\212\031\211\001" +
    "\002\000\050\004\uffca\007\uffca\010\uffca\014\uffca\044\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\070\uffca" +
    "\071\uffca\001\002\000\030\006\052\011\044\013\053\015" +
    "\046\017\045\023\064\025\061\045\047\047\065\071\035" +
    "\072\062\001\002\000\056\004\uffce\007\uffce\010\uffce\013" +
    "\171\014\uffce\016\uffce\044\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\070\uffce\071\uffce\073\172\001\002" +
    "\000\050\004\uffd2\007\uffd2\010\uffd2\014\uffd2\044\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\070\uffd2\071" +
    "\uffd2\001\002\000\050\004\uffd1\007\uffd1\010\uffd1\014\uffd1" +
    "\044\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\070\uffd1\071\uffd1\001\002\000\030\006\052\011\044\013" +
    "\053\015\046\017\045\023\064\025\061\045\047\047\065" +
    "\071\035\072\062\001\002\000\032\006\052\011\044\013" +
    "\053\014\uffb9\015\046\017\045\023\064\025\061\045\047" +
    "\047\065\071\035\072\062\001\002\000\050\004\uffd4\007" +
    "\uffd4\010\uffd4\014\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\070\uffd4\071\uffd4\001\002\000\052" +
    "\004\uffd7\007\uffd7\010\uffd7\014\uffd7\016\142\044\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\054\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\070\uffd7\071" +
    "\uffd7\001\002\000\050\004\uffd6\007\uffd6\010\uffd6\014\uffd6" +
    "\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\070\uffd6\071\uffd6\001\002\000\050\004\uffd8\007\uffd8\010" +
    "\uffd8\014\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\070\uffd8\071\uffd8\001\002\000\050\004\uffdb" +
    "\007\uffdb\010\uffdb\014\uffdb\044\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\054\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\070\uffdb\071\uffdb\001\002\000" +
    "\050\004\uffc9\007\uffc9\010\uffc9\014\uffc9\044\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\070\uffc9\071\uffc9" +
    "\001\002\000\050\004\uffc8\007\uffc8\010\uffc8\014\uffc8\044" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\070" +
    "\uffc8\071\uffc8\001\002\000\040\044\076\046\101\047\074" +
    "\050\105\051\103\052\077\054\106\056\107\057\102\060" +
    "\100\061\073\062\110\063\104\070\075\071\131\001\002" +
    "\000\050\004\uffcb\007\uffcb\010\uffcb\014\uffcb\044\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\070\uffcb\071" +
    "\uffcb\001\002\000\030\006\052\011\044\013\053\015\046" +
    "\017\045\023\064\025\061\045\047\047\065\071\035\072" +
    "\062\001\002\000\050\004\uffd5\007\uffd5\010\uffd5\014\uffd5" +
    "\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\054" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\070\uffd5\071\uffd5\001\002\000\050\004\uffd3\007\uffd3\010" +
    "\uffd3\014\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\070\uffd3\071\uffd3\001\002\000\050\004\uffd9" +
    "\007\uffd9\010\uffd9\014\uffd9\044\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\054\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\070\uffd9\071\uffd9\001\002\000" +
    "\050\004\uffdc\007\uffdc\010\uffdc\014\uffdc\044\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\070\uffdc\071\uffdc" +
    "\001\002\000\050\004\uffd0\007\uffd0\010\uffd0\014\uffd0\044" +
    "\uffd0\046\uffd0\047\uffd0\050\105\051\103\052\077\054\106" +
    "\056\107\057\102\060\100\061\073\062\110\063\104\070" +
    "\075\071\uffd0\001\002\000\030\006\052\011\044\013\053" +
    "\015\046\017\045\023\064\025\061\045\047\047\065\071" +
    "\035\072\062\001\002\000\030\006\052\011\044\013\053" +
    "\015\046\017\045\023\064\025\061\045\047\047\065\071" +
    "\035\072\062\001\002\000\030\006\052\011\044\013\053" +
    "\015\046\017\045\023\064\025\061\045\047\047\065\071" +
    "\035\072\062\001\002\000\010\011\044\013\053\045\123" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\050\004\uffa1\007\uffa1\010\uffa1\014\uffa1\044" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\054\106" +
    "\056\107\057\102\060\100\061\uffa1\062\uffa1\063\uffa1\070" +
    "\uffa1\071\uffa1\001\002\000\050\004\uffa6\007\uffa6\010\uffa6" +
    "\014\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\070\uffa6\071\uffa6\001\002\000\050\004\uffa7\007" +
    "\uffa7\010\uffa7\014\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\070\uffa7\071\uffa7\001\002\000\050" +
    "\004\uff8c\007\uff8c\010\uff8c\014\uff8c\044\uff8c\046\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\054\106\056\107\057\102" +
    "\060\100\061\073\062\110\063\104\070\uff8c\071\uff8c\001" +
    "\002\000\050\004\uffa0\007\uffa0\010\uffa0\014\uffa0\044\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\054\106\056" +
    "\107\057\102\060\100\061\uffa0\062\uffa0\063\uffa0\070\uffa0" +
    "\071\uffa0\001\002\000\050\004\uff8b\007\uff8b\010\uff8b\014" +
    "\uff8b\044\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\054\106\056\107\057\102\060\100\061\073\062\110\063" +
    "\104\070\uff8b\071\uff8b\001\002\000\050\004\uffa5\007\uffa5" +
    "\010\uffa5\014\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\070\uffa5\071\uffa5\001\002\000\050\004" +
    "\uff8e\007\uff8e\010\uff8e\014\uff8e\044\uff8e\046\uff8e\047\uff8e" +
    "\050\105\051\103\052\077\054\106\056\107\057\102\060" +
    "\100\061\073\062\110\063\104\070\075\071\uff8e\001\002" +
    "\000\050\004\uffa4\007\uffa4\010\uffa4\014\uffa4\044\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\070\uffa4\071" +
    "\uffa4\001\002\000\050\004\uff8a\007\uff8a\010\uff8a\014\uff8a" +
    "\044\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\054" +
    "\106\056\107\057\102\060\100\061\073\062\110\063\104" +
    "\070\uff8a\071\uff8a\001\002\000\050\004\uff9f\007\uff9f\010" +
    "\uff9f\014\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\070\uff9f\071\uff9f\001\002\000\050\004\uff9e" +
    "\007\uff9e\010\uff9e\014\uff9e\044\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\054\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\070\uff9e\071\uff9e\001\002\000" +
    "\050\004\uff9d\007\uff9d\010\uff9d\014\uff9d\044\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\070\uff9d\071\uff9d" +
    "\001\002\000\050\004\uff89\007\uff89\010\uff89\014\uff89\044" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\054\106" +
    "\056\107\057\102\060\100\061\073\062\110\063\104\070" +
    "\uff89\071\uff89\001\002\000\050\004\uff8d\007\uff8d\010\uff8d" +
    "\014\uff8d\044\uff8d\046\uff8d\047\uff8d\050\105\051\103\052" +
    "\077\054\106\056\107\057\102\060\100\061\073\062\110" +
    "\063\104\070\075\071\uff8d\001\002\000\050\004\uffa2\007" +
    "\uffa2\010\uffa2\014\uffa2\044\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\054\106\056\107\057\102\060\100\061" +
    "\uffa2\062\uffa2\063\uffa2\070\uffa2\071\uffa2\001\002\000\004" +
    "\045\132\001\002\000\004\006\133\001\002\000\032\006" +
    "\052\007\uffad\011\044\013\053\015\046\017\045\023\064" +
    "\025\061\045\047\047\065\071\035\072\062\001\002\000" +
    "\042\007\uffaf\010\140\044\076\046\101\047\074\050\105" +
    "\051\103\052\077\054\106\056\107\057\102\060\100\061" +
    "\073\062\110\063\104\070\075\001\002\000\004\007\uffae" +
    "\001\002\000\004\007\137\001\002\000\050\004\uffb1\007" +
    "\uffb1\010\uffb1\014\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\070\uffb1\071\uffb1\001\002\000\030" +
    "\006\052\011\044\013\053\015\046\017\045\023\064\025" +
    "\061\045\047\047\065\071\035\072\062\001\002\000\004" +
    "\007\uffb0\001\002\000\006\013\053\045\047\001\002\000" +
    "\052\004\uff9b\007\uff9b\010\uff9b\014\uff9b\016\160\044\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\070\uff9b" +
    "\071\uff9b\001\002\000\052\004\uff9c\007\uff9c\010\uff9c\014" +
    "\uff9c\016\145\044\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\070\uff9c\071\uff9c\001\002\000\006\013\053" +
    "\045\047\001\002\000\004\016\151\001\002\000\050\004" +
    "\uff97\007\uff97\010\uff97\014\uff97\044\uff97\046\uff97\047\uff97" +
    "\050\uff97\051\uff97\052\uff97\054\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\070\uff97\071\uff97\001\002" +
    "\000\004\016\142\001\002\000\006\013\053\045\047\001" +
    "\002\000\052\004\uff99\007\uff99\010\uff99\014\uff99\016\156" +
    "\044\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\054" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99" +
    "\070\uff99\071\uff99\001\002\000\052\004\uff9a\007\uff9a\010" +
    "\uff9a\014\uff9a\016\154\044\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\054\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\070\uff9a\071\uff9a\001\002\000\006" +
    "\013\053\045\047\001\002\000\050\004\uff96\007\uff96\010" +
    "\uff96\014\uff96\044\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\054\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\063\uff96\070\uff96\071\uff96\001\002\000\006\013\053" +
    "\045\047\001\002\000\050\004\uff98\007\uff98\010\uff98\014" +
    "\uff98\044\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\054\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\070\uff98\071\uff98\001\002\000\006\013\053\045\047" +
    "\001\002\000\050\004\uff95\007\uff95\010\uff95\014\uff95\044" +
    "\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\054\uff95" +
    "\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\070" +
    "\uff95\071\uff95\001\002\000\042\010\165\014\uffba\044\076" +
    "\046\101\047\074\050\105\051\103\052\077\054\106\056" +
    "\107\057\102\060\100\061\073\062\110\063\104\070\075" +
    "\001\002\000\004\014\164\001\002\000\052\004\uffbc\007" +
    "\uffbc\010\uffbc\014\uffbc\016\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\054\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\070\uffbc\071\uffbc\001\002" +
    "\000\032\006\052\011\044\013\053\014\uffb9\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\004\014\uffbb\001\002\000\040\007\170\044" +
    "\076\046\101\047\074\050\105\051\103\052\077\054\106" +
    "\056\107\057\102\060\100\061\073\062\110\063\104\070" +
    "\075\001\002\000\050\004\uffcf\007\uffcf\010\uffcf\014\uffcf" +
    "\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\070\uffcf\071\uffcf\001\002\000\004\045\047\001\002\000" +
    "\004\045\173\001\002\000\054\004\uffcd\007\uffcd\010\uffcd" +
    "\014\uffcd\016\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\070\uffcd\071\uffcd\001\002\000" +
    "\004\014\175\001\002\000\054\004\uffcc\007\uffcc\010\uffcc" +
    "\014\uffcc\016\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\070\uffcc\071\uffcc\001\002\000" +
    "\050\004\uffa3\007\uffa3\010\uffa3\014\uffa3\044\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\054\106\056\107\057" +
    "\102\060\100\061\uffa3\062\uffa3\063\uffa3\070\uffa3\071\uffa3" +
    "\001\002\000\060\002\ufff5\004\ufff5\005\ufff5\007\ufff5\010" +
    "\ufff5\012\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\043\ufff5\045\ufff5\053\ufff5\055" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\071\ufff5\001\002" +
    "\000\004\012\231\001\002\000\060\002\ufff2\004\ufff2\005" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\045" +
    "\ufff2\053\ufff2\055\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\071\ufff2\001\002\000\004\054\224\001\002\000\060\002" +
    "\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\012\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\043\ufff6\045\ufff6\053\ufff6\055\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\071\ufff6\001\002\000\060\002\ufff0\004" +
    "\ufff0\005\ufff0\007\ufff0\010\ufff0\012\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043" +
    "\ufff0\045\ufff0\053\ufff0\055\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\071\ufff0\001\002\000\004\054\217\001\002\000" +
    "\060\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\012\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\043\ufff3\045\ufff3\053\ufff3\055\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\071\ufff3\001\002\000\004\005" +
    "\213\001\002\000\060\002\ufff7\004\ufff7\005\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\045\ufff7\053\ufff7" +
    "\055\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\071\ufff7\001" +
    "\002\000\060\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1" +
    "\012\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\043\ufff1\045\ufff1\053\ufff1\055\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\071\ufff1\001\002\000" +
    "\060\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\012\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\043\ufff4\045\ufff4\053\ufff4\055\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\071\ufff4\001\002\000\022\020" +
    "\201\021\202\022\205\024\204\026\206\027\177\030\212" +
    "\031\211\001\002\000\004\010\215\001\002\000\024\012" +
    "\uffbd\020\201\021\202\022\205\024\204\026\206\027\177" +
    "\030\212\031\211\001\002\000\004\012\uffbe\001\002\000" +
    "\024\020\201\021\202\022\205\024\204\026\206\027\177" +
    "\030\212\031\211\045\220\001\002\000\004\055\223\001" +
    "\002\000\004\055\222\001\002\000\060\002\uff94\004\uff94" +
    "\005\uff94\007\uff94\010\uff94\012\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\043\uff94" +
    "\045\uff94\053\uff94\055\uff94\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\071\uff94\001\002\000\060\002\uff93\004\uff93\005\uff93" +
    "\007\uff93\010\uff93\012\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\043\uff93\045\uff93" +
    "\053\uff93\055\uff93\064\uff93\065\uff93\066\uff93\067\uff93\071" +
    "\uff93\001\002\000\022\020\201\021\202\022\205\024\204" +
    "\026\206\027\177\030\212\031\211\001\002\000\004\010" +
    "\226\001\002\000\022\020\201\021\202\022\205\024\204" +
    "\026\206\027\177\030\212\031\211\001\002\000\004\055" +
    "\230\001\002\000\060\002\uff8f\004\uff8f\005\uff8f\007\uff8f" +
    "\010\uff8f\012\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f\045\uff8f\053\uff8f" +
    "\055\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\071\uff8f\001" +
    "\002\000\050\004\uffbf\007\uffbf\010\uffbf\014\uffbf\044\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\070\uffbf" +
    "\071\uffbf\001\002\000\040\004\233\044\076\046\101\047" +
    "\074\050\105\051\103\052\077\054\106\056\107\057\102" +
    "\060\100\061\073\062\110\063\104\070\075\001\002\000" +
    "\044\002\uffde\012\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\045\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\071\uffde\001\002\000\004" +
    "\004\236\001\002\000\044\002\uffaa\012\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\043\uffaa\045\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\071" +
    "\uffaa\001\002\000\044\002\uffa9\012\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043" +
    "\uffa9\045\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\071\uffa9" +
    "\001\002\000\016\002\uffe0\012\uffe0\034\uffe0\036\uffe0\043" +
    "\uffe0\065\uffe0\001\002\000\030\006\052\011\044\013\053" +
    "\015\046\017\045\023\064\025\061\045\047\047\065\071" +
    "\035\072\062\001\002\000\040\007\242\044\076\046\101" +
    "\047\074\050\105\051\103\052\077\054\106\056\107\057" +
    "\102\060\100\061\073\062\110\063\104\070\075\001\002" +
    "\000\004\042\243\001\002\000\030\032\015\033\023\035" +
    "\016\037\012\040\030\041\006\045\021\064\020\066\010" +
    "\067\034\071\035\001\002\000\006\034\245\043\246\001" +
    "\002\000\044\002\uffab\012\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\043\uffab\045" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\071\uffab\001\002" +
    "\000\030\032\015\033\023\035\016\037\012\040\030\041" +
    "\006\045\021\064\020\066\010\067\034\071\035\001\002" +
    "\000\004\034\250\001\002\000\044\002\uffac\012\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\043\uffac\045\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\071\uffac\001\002\000\044\002\uffe3\012\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\043\uffe3\045\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\071\uffe3\001\002\000\024\020\201\021\202\022\205\024" +
    "\204\026\206\027\177\030\212\031\211\045\253\001\002" +
    "\000\050\002\uffc4\004\255\012\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4" +
    "\045\uffc4\053\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\071" +
    "\uffc4\001\002\000\050\002\uffc4\004\255\012\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\043\uffc4\045\uffc4\053\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\071\uffc4\001\002\000\046\002\uffc5\012\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\043\uffc5\045\uffc5\053\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\071\uffc5\001\002\000\046\002\uffc7\012\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\043\uffc7\045\uffc7\053\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\071\uffc7\001\002\000\046\002\uffc6\012" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\043\uffc6\045\uffc6\053\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\071\uffc6\001\002\000\044\002\uff91" +
    "\012\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\040\uff91\041\uff91\043\uff91\045\uff91\064\uff91\065\uff91" +
    "\066\uff91\067\uff91\071\uff91\001\002\000\040\004\262\044" +
    "\076\046\101\047\074\050\105\051\103\052\077\054\106" +
    "\056\107\057\102\060\100\061\073\062\110\063\104\070" +
    "\075\001\002\000\044\002\uff90\012\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\043" +
    "\uff90\045\uff90\064\uff90\065\uff90\066\uff90\067\uff90\071\uff90" +
    "\001\002\000\004\036\264\001\002\000\044\002\uffa8\012" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\043\uffa8\045\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\071\uffa8\001\002\000\004\045\271\001\002" +
    "\000\004\045\267\001\002\000\004\004\270\001\002\000" +
    "\044\002\uffb3\012\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\071\uffb3\001\002\000\004" +
    "\004\272\001\002\000\044\002\uffb2\012\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\043\uffb2\045\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\071" +
    "\uffb2\001\002\000\030\006\052\011\044\013\053\015\046" +
    "\017\045\023\064\025\061\045\047\047\065\071\035\072" +
    "\062\001\002\000\040\004\275\044\076\046\101\047\074" +
    "\050\105\051\103\052\077\054\106\056\107\057\102\060" +
    "\100\061\073\062\110\063\104\070\075\001\002\000\044" +
    "\002\uffc0\012\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\045\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\071\uffc0\001\002\000\004\011" +
    "\277\001\002\000\004\045\301\001\002\000\004\012\311" +
    "\001\002\000\004\005\302\001\002\000\024\020\201\021" +
    "\202\022\205\024\204\026\206\027\177\030\212\031\211" +
    "\045\303\001\002\000\006\010\306\012\uffb4\001\002\000" +
    "\006\010\306\012\uffb4\001\002\000\004\012\uffb6\001\002" +
    "\000\004\045\301\001\002\000\004\012\uffb5\001\002\000" +
    "\004\012\uffb7\001\002\000\004\004\312\001\002\000\044" +
    "\002\uffb8\012\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\071\uffb8\001\002\000\004\002" +
    "\001\001\002\000\004\004\315\001\002\000\044\002\uffdd" +
    "\012\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\043\uffdd\045\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\071\uffdd\001\002\000\032\002\ufffe\032" +
    "\015\033\023\035\016\037\012\040\030\041\006\045\021" +
    "\064\020\066\010\067\034\071\035\001\002\000\004\011" +
    "\320\001\002\000\030\032\015\033\023\035\016\037\012" +
    "\040\030\041\006\045\021\064\020\066\010\067\034\071" +
    "\035\001\002\000\004\012\322\001\002\000\004\004\323" +
    "\001\002\000\032\002\uff92\032\uff92\033\uff92\035\uff92\037" +
    "\uff92\040\uff92\041\uff92\045\uff92\064\uff92\066\uff92\067\uff92" +
    "\071\uff92\001\002\000\004\002\000\001\002\000\004\006" +
    "\326\001\002\000\006\007\ufff8\045\327\001\002\000\004" +
    "\005\341\001\002\000\004\007\331\001\002\000\004\011" +
    "\332\001\002\000\030\032\015\033\023\035\016\037\012" +
    "\040\030\041\006\045\021\064\020\066\010\067\034\071" +
    "\035\001\002\000\004\012\334\001\002\000\006\004\ufffb" +
    "\005\336\001\002\000\004\004\340\001\002\000\022\020" +
    "\201\021\202\022\205\024\204\026\206\027\177\030\212" +
    "\031\211\001\002\000\004\004\ufffc\001\002\000\044\002" +
    "\ufffd\012\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\043\ufffd\045\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\071\ufffd\001\002\000\022\020\201" +
    "\021\202\022\205\024\204\026\206\027\177\030\212\031" +
    "\211\001\002\000\006\007\ufff9\010\343\001\002\000\006" +
    "\007\ufff8\045\327\001\002\000\004\007\ufffa\001\002\000" +
    "\030\006\052\011\044\013\053\015\046\017\045\023\064" +
    "\025\061\045\047\047\065\071\035\072\062\001\002\000" +
    "\004\004\352\001\002\000\042\004\uffc2\010\350\044\076" +
    "\046\101\047\074\050\105\051\103\052\077\054\106\056" +
    "\107\057\102\060\100\061\073\062\110\063\104\070\075" +
    "\001\002\000\030\006\052\011\044\013\053\015\046\017" +
    "\045\023\064\025\061\045\047\047\065\071\035\072\062" +
    "\001\002\000\004\004\uffc1\001\002\000\044\002\uffc3\012" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\045\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\071\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\052\002\035\003\024\005\004\007\025\010" +
    "\037\011\003\013\026\016\016\020\013\021\041\022\030" +
    "\023\023\043\040\044\021\050\010\054\032\056\006\060" +
    "\012\062\036\063\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\315\001\001\000" +
    "\004\060\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\265\053" +
    "\207\055\202\001\001\000\046\002\262\003\024\005\004" +
    "\007\025\010\037\011\003\013\026\016\016\020\013\021" +
    "\041\022\030\023\023\043\040\044\021\054\032\060\012" +
    "\062\036\063\031\001\001\000\002\001\001\000\034\006" +
    "\260\024\067\025\055\026\065\027\054\031\057\032\047" +
    "\034\056\037\053\040\070\041\066\044\050\060\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\236\003\024\005\004\007" +
    "\025\010\037\011\003\013\026\016\016\020\013\021\041" +
    "\022\030\023\023\043\040\044\021\054\032\060\012\062" +
    "\036\063\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\231\024\067\025\055\026\065" +
    "\027\054\031\057\032\047\034\056\037\053\040\070\041" +
    "\066\044\050\060\042\001\001\000\034\006\062\024\067" +
    "\025\055\026\065\027\054\031\057\032\047\034\056\037" +
    "\053\040\070\041\066\044\050\060\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\035\177" +
    "\042\206\053\207\055\202\001\001\000\002\001\001\000" +
    "\034\006\175\024\067\025\055\026\065\027\054\031\057" +
    "\032\047\034\056\037\053\040\070\041\066\044\050\060" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\166\024\067\025\055\026\065\027" +
    "\054\031\057\032\047\034\056\037\053\040\070\041\066" +
    "\044\050\060\042\001\001\000\036\006\161\024\067\025" +
    "\055\026\065\027\054\031\057\032\047\034\056\036\162" +
    "\037\053\040\070\041\066\044\050\060\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\071" +
    "\024\067\025\055\026\065\027\054\031\057\032\047\034" +
    "\056\037\053\040\070\041\066\044\050\060\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\127\024\067" +
    "\025\055\026\065\027\054\031\057\032\047\034\056\037" +
    "\053\040\070\041\066\044\050\060\042\001\001\000\034" +
    "\006\126\024\067\025\055\026\065\027\054\031\057\032" +
    "\047\034\056\037\053\040\070\041\066\044\050\060\042" +
    "\001\001\000\034\006\125\024\067\025\055\026\065\027" +
    "\054\031\057\032\047\034\056\037\053\040\070\041\066" +
    "\044\050\060\042\001\001\000\006\027\124\034\123\001" +
    "\001\000\034\006\121\024\067\025\055\026\065\027\054" +
    "\031\057\032\047\034\056\037\053\040\070\041\066\044" +
    "\050\060\042\001\001\000\034\006\120\024\067\025\055" +
    "\026\065\027\054\031\057\032\047\034\056\037\053\040" +
    "\070\041\066\044\050\060\042\001\001\000\034\006\117" +
    "\024\067\025\055\026\065\027\054\031\057\032\047\034" +
    "\056\037\053\040\070\041\066\044\050\060\042\001\001" +
    "\000\034\006\116\024\067\025\055\026\065\027\054\031" +
    "\057\032\047\034\056\037\053\040\070\041\066\044\050" +
    "\060\042\001\001\000\034\006\115\024\067\025\055\026" +
    "\065\027\054\031\057\032\047\034\056\037\053\040\070" +
    "\041\066\044\050\060\042\001\001\000\034\006\114\024" +
    "\067\025\055\026\065\027\054\031\057\032\047\034\056" +
    "\037\053\040\070\041\066\044\050\060\042\001\001\000" +
    "\034\006\113\024\067\025\055\026\065\027\054\031\057" +
    "\032\047\034\056\037\053\040\070\041\066\044\050\060" +
    "\042\001\001\000\034\006\112\024\067\025\055\026\065" +
    "\027\054\031\057\032\047\034\056\037\053\040\070\041" +
    "\066\044\050\060\042\001\001\000\034\006\111\024\067" +
    "\025\055\026\065\027\054\031\057\032\047\034\056\037" +
    "\053\040\070\041\066\044\050\060\042\001\001\000\034" +
    "\006\110\024\067\025\055\026\065\027\054\031\057\032" +
    "\047\034\056\037\053\040\070\041\066\044\050\060\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\133" +
    "\024\067\025\055\026\065\027\054\031\057\032\047\034" +
    "\056\037\053\040\070\041\066\044\050\045\135\046\134" +
    "\060\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\133\024\067" +
    "\025\055\026\065\027\054\031\057\032\047\034\056\037" +
    "\053\040\070\041\066\044\050\046\140\060\042\001\001" +
    "\000\002\001\001\000\006\027\143\060\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\147\032\146" +
    "\060\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\152\060\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\147\032\154\060" +
    "\145\001\001\000\002\001\001\000\010\027\147\032\156" +
    "\060\145\001\001\000\002\001\001\000\010\027\147\032" +
    "\160\060\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\161\024" +
    "\067\025\055\026\065\027\054\031\057\032\047\034\056" +
    "\036\165\037\053\040\070\041\066\044\050\060\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\213" +
    "\053\207\055\202\001\001\000\002\001\001\000\012\035" +
    "\215\042\206\053\207\055\202\001\001\000\002\001\001" +
    "\000\010\042\220\053\207\055\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\224\053\207\055\202\001\001\000\002\001" +
    "\001\000\010\042\226\053\207\055\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\240\024" +
    "\067\025\055\026\065\027\054\031\057\032\047\034\056" +
    "\037\053\040\070\041\066\044\050\060\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\002\243\003\024" +
    "\005\004\007\025\010\037\011\003\013\026\016\016\020" +
    "\013\021\041\022\030\023\023\043\040\044\021\054\032" +
    "\060\012\062\036\063\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\002\246\003\024\005\004\007\025" +
    "\010\037\011\003\013\026\016\016\020\013\021\041\022" +
    "\030\023\023\043\040\044\021\054\032\060\012\062\036" +
    "\063\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\253\053\207\055\202\001\001" +
    "\000\004\051\256\001\001\000\004\051\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\273\024\067\025\055\026\065" +
    "\027\054\031\057\032\047\034\056\037\053\040\070\041" +
    "\066\044\050\060\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\303\053\207" +
    "\055\202\001\001\000\004\052\307\001\001\000\004\052" +
    "\304\001\001\000\002\001\001\000\004\012\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\035\003\024\005\004\007\025\010" +
    "\037\011\003\013\026\016\016\020\013\021\041\022\030" +
    "\023\023\043\040\044\021\054\032\056\323\060\012\062" +
    "\036\063\031\001\001\000\002\001\001\000\046\002\320" +
    "\003\024\005\004\007\025\010\037\011\003\013\026\016" +
    "\016\020\013\021\041\022\030\023\023\043\040\044\021" +
    "\054\032\060\012\062\036\063\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\332" +
    "\003\024\005\004\007\025\010\037\011\003\013\026\016" +
    "\016\020\013\021\041\022\030\023\023\043\040\044\021" +
    "\054\032\060\012\062\036\063\031\001\001\000\002\001" +
    "\001\000\004\017\334\001\001\000\002\001\001\000\010" +
    "\042\336\053\207\055\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\341\053\207\055\202\001\001" +
    "\000\002\001\001\000\004\014\343\001\001\000\002\001" +
    "\001\000\036\006\346\024\067\025\055\026\065\027\054" +
    "\031\057\032\047\034\056\037\053\040\070\041\066\044" +
    "\050\057\345\060\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\346\024\067\025\055\026\065\027" +
    "\054\031\057\032\047\034\056\037\053\040\070\041\066" +
    "\044\050\057\350\060\042\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_block main program_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_block ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL statements RCURL returnType SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // returnType ::= COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // returnType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameter ::= IDENTIFIER COLON data_type COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= IDENTIFIER COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements_ ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements_ ::= declaration_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements_ ::= break_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements_ ::= dictionary_binding 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements_ ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements_ ::= if_else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements_ ::= loop_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements_ ::= return_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements_ ::= typeDefinition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements_ ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements_ ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements_ ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements_ ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements_ ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements_ ::= read_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statements_ statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= statements_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // print_statement ::= PRINT expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // read_statement ::= READ identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= sequenceSlicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // identifier ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // identifier ::= IDENTIFIER LBRACKET identifier RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // data ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // data ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // data ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // data ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= IDENTIFIER COLON data_type dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= IDENTIFIER COLON IDENTIFIER dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration_assignment ::= declaration COLONEQ all_data SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // all_data ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // all_data ::= expression COMMA all_data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment ::= identifier COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dictionary ::= LCURL dict_element RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dict_element ::= data_type COLON data_type COMMA dict_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dict_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sequence ::= LBRACKET seq_element RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // seq_element ::= expression COMMA seq_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // seq_element ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // seq_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefinition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // objectArray ::= IDENTIFIER COLON IDENTIFIER arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // objectArray ::= IDENTIFIER COLON data_type arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arr ::= COMMA objectArray 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // alias ::= ALIAS data_type IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // alias ::= ALIAS IDENTIFIER IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // function_call ::= QMARK expression QMARK IDENTIFIER LPAREN params RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // params_ ::= expression COMMA params_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // params_ ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // params ::= params_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // break_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // break_statement ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // loop_statement ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparison ::= expression LT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparison ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // equality ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // equality ::= expression NOTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolean_operations ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_operations ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_operations ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_operations ::= expression IMPLY expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // in ::= expression IN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // in ::= expression IN dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // in ::= expression IN sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // concat ::= sequence COLONCOLON sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // concat ::= sequence COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concat ::= identifier COLONCOLON sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concat ::= identifier COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // concat ::= identifier COLONCOLON identifier COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // concat ::= sequence COLONCOLON sequence COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // concat ::= identifier COLONCOLON sequence COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // concat ::= sequence COLONCOLON identifier COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // seq ::= SEQ LT data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // seq ::= SEQ LT IDENTIFIER GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // main ::= MAIN LCURL statements RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // return_ ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // return_ ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dict ::= DICT LT data_type COMMA data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operation ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operation ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operation ::= expression TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operation ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operation ::= expression MOD expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operation ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
