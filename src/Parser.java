
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\050\005\000\002\056" +
    "\003\000\002\056\002\000\002\016\014\000\002\017\004" +
    "\000\002\017\002\000\002\014\007\000\002\014\005\000" +
    "\002\014\002\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\004\000\002\065\003\000\002\065\003\000\002\064\003" +
    "\000\002\064\003\000\002\003\004\000\002\003\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\003\000\002" +
    "\062\005\000\002\063\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\005\000\002\060" +
    "\003\000\002\060\005\000\002\060\006\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\005\006\000\002\005\006\000\002\051\003\000\002" +
    "\051\002\000\002\007\006\000\002\057\003\000\002\057" +
    "\005\000\002\054\006\000\002\034\005\000\002\035\007" +
    "\000\002\035\002\000\002\027\005\000\002\036\005\000" +
    "\002\036\003\000\002\036\002\000\002\011\010\000\002" +
    "\012\006\000\002\012\006\000\002\052\004\000\002\052" +
    "\002\000\002\013\006\000\002\013\006\000\002\044\011" +
    "\000\002\046\005\000\002\046\003\000\002\045\003\000" +
    "\002\045\002\000\002\020\013\000\002\020\011\000\002" +
    "\022\004\000\002\022\005\000\002\023\005\000\002\024" +
    "\005\000\002\024\005\000\002\025\005\000\002\025\005" +
    "\000\002\026\004\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\007\000\002\032\007" +
    "\000\002\032\007\000\002\032\007\000\002\053\006\000" +
    "\002\053\006\000\002\047\007\000\002\043\004\000\002" +
    "\043\005\000\002\055\010\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\032\032\015\033\025\035\017\037\012\040" +
    "\034\041\006\045\022\064\021\065\ufffe\066\010\067\036" +
    "\071\037\001\002\000\044\002\uffe9\012\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\043\uffe9\045\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\071" +
    "\uffe9\001\002\000\046\002\uffe2\012\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043" +
    "\uffe2\045\uffe2\053\350\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\071\uffe2\001\002\000\004\045\330\001\002\000\004\065" +
    "\322\001\002\000\004\045\051\001\002\000\004\002\316" +
    "\001\002\000\004\045\301\001\002\000\004\053\276\001" +
    "\002\000\044\002\uffed\012\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed\045" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\071\uffed\001\002" +
    "\000\024\020\203\021\204\022\207\024\206\026\210\027" +
    "\201\030\214\031\213\045\270\001\002\000\044\002\uffde" +
    "\012\uffde\032\015\033\025\034\uffde\035\017\036\uffde\037" +
    "\012\040\034\041\006\043\uffde\045\022\064\021\065\uffde" +
    "\066\010\067\036\071\037\001\002\000\030\032\015\033" +
    "\025\035\017\037\012\040\034\041\006\045\022\064\021" +
    "\066\010\067\036\071\037\001\002\000\044\002\uffdf\012" +
    "\uffdf\032\015\033\025\034\uffdf\035\017\036\uffdf\037\012" +
    "\040\034\041\006\043\uffdf\045\051\064\021\065\uffdf\066" +
    "\010\067\036\071\037\001\002\000\032\004\261\006\055" +
    "\011\047\013\054\015\050\017\046\023\066\025\063\045" +
    "\051\047\070\071\037\072\064\001\002\000\012\005\253" +
    "\013\173\053\uffcb\073\174\001\002\000\044\002\uffe4\012" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\043\uffe4\045\uffe4\064\uffe4\065\uffe4\066" +
    "\uffe4\067\uffe4\071\uffe4\001\002\000\004\004\252\001\002" +
    "\000\004\006\241\001\002\000\044\002\uffeb\012\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\043\uffeb\045\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\071\uffeb\001\002\000\016\002\uffdc\012\uffdc\034\uffdc" +
    "\036\uffdc\043\uffdc\065\uffdc\001\002\000\044\002\uffe1\012" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\043\uffe1\045\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\071\uffe1\001\002\000\044\002\uffe7\012\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\043\uffe7\045\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\071\uffe7\001\002\000\044\002\uffef\012\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\041\uffef\043\uffef\045\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\071\uffef\001\002\000\044\002\uffe3\012\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\043\uffe3\045\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\071\uffe3\001\002\000\006\004\237\023\236\001\002\000" +
    "\044\002\uffe6\012\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\045\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\071\uffe6\001\002\000\030" +
    "\006\055\011\047\013\054\015\050\017\046\023\066\025" +
    "\063\045\051\047\070\071\037\072\064\001\002\000\030" +
    "\006\055\011\047\013\054\015\050\017\046\023\066\025" +
    "\063\045\051\047\070\071\037\072\064\001\002\000\006" +
    "\002\uffff\065\uffff\001\002\000\044\002\uffe8\012\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\043\uffe8\045\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\071\uffe8\001\002\000\044\002\uffee\012\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\043\uffee\045\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
    "\071\uffee\001\002\000\044\002\uffea\012\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\043\uffea\045\uffea\064\uffea\065\uffea\066\uffea\067\uffea\071" +
    "\uffea\001\002\000\044\002\uffec\012\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043" +
    "\uffec\045\uffec\064\uffec\065\uffec\066\uffec\067\uffec\071\uffec" +
    "\001\002\000\052\004\uffd7\007\uffd7\010\uffd7\014\uffd7\016" +
    "\153\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\054\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\070\uffd7\071\uffd7\001\002\000\050\004\uffc7\007\uffc7" +
    "\010\uffc7\014\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\054\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\070\uffc7\071\uffc7\001\002\000\024\012" +
    "\uffba\020\203\021\204\022\207\024\206\026\210\027\201" +
    "\030\214\031\213\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\060\004\uffcb\007\uffcb\010" +
    "\uffcb\013\173\014\uffcb\016\uffcb\044\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\070\uffcb\071\uffcb" +
    "\073\174\001\002\000\050\004\uffcf\007\uffcf\010\uffcf\014" +
    "\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\054\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\070\uffcf\071\uffcf\001\002\000\050\004\uffce\007\uffce" +
    "\010\uffce\014\uffce\044\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\070\uffce\071\uffce\001\002\000\032\006" +
    "\055\011\047\013\054\014\uffb6\015\050\017\046\023\066" +
    "\025\063\045\051\047\070\071\037\072\064\001\002\000" +
    "\030\006\055\011\047\013\054\015\050\017\046\023\066" +
    "\025\063\045\051\047\070\071\037\072\064\001\002\000" +
    "\050\004\uffd1\007\uffd1\010\uffd1\014\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\070\uffd1\071\uffd1" +
    "\001\002\000\052\004\uffd4\007\uffd4\010\uffd4\014\uffd4\016" +
    "\144\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\070\uffd4\071\uffd4\001\002\000\050\004\uffd3\007\uffd3" +
    "\010\uffd3\014\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\070\uffd3\071\uffd3\001\002\000\050\004" +
    "\uffd5\007\uffd5\010\uffd5\014\uffd5\044\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\054\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\070\uffd5\071\uffd5\001\002" +
    "\000\050\004\uffd8\007\uffd8\010\uffd8\014\uffd8\044\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\070\uffd8\071" +
    "\uffd8\001\002\000\050\004\uffc6\007\uffc6\010\uffc6\014\uffc6" +
    "\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\070\uffc6\071\uffc6\001\002\000\050\004\uffc5\007\uffc5\010" +
    "\uffc5\014\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\070\uffc5\071\uffc5\001\002\000\040\044\100" +
    "\046\103\047\076\050\107\051\105\052\101\054\110\056" +
    "\111\057\104\060\102\061\075\062\112\063\106\070\077" +
    "\071\133\001\002\000\050\004\uffc8\007\uffc8\010\uffc8\014" +
    "\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\054\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\070\uffc8\071\uffc8\001\002\000\050\004\uffd2\007\uffd2" +
    "\010\uffd2\014\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\054\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\070\uffd2\071\uffd2\001\002\000\030\006" +
    "\055\011\047\013\054\015\050\017\046\023\066\025\063" +
    "\045\051\047\070\071\037\072\064\001\002\000\050\004" +
    "\uffd0\007\uffd0\010\uffd0\014\uffd0\044\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\054\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\070\uffd0\071\uffd0\001\002" +
    "\000\050\004\uffd9\007\uffd9\010\uffd9\014\uffd9\044\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\070\uffd9\071" +
    "\uffd9\001\002\000\050\004\uffd6\007\uffd6\010\uffd6\014\uffd6" +
    "\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\070\uffd6\071\uffd6\001\002\000\050\004\uffcd\007\uffcd\010" +
    "\uffcd\014\uffcd\044\uffcd\046\uffcd\047\uffcd\050\107\051\105" +
    "\052\101\054\110\056\111\057\104\060\102\061\075\062" +
    "\112\063\106\070\077\071\uffcd\001\002\000\030\006\055" +
    "\011\047\013\054\015\050\017\046\023\066\025\063\045" +
    "\051\047\070\071\037\072\064\001\002\000\030\006\055" +
    "\011\047\013\054\015\050\017\046\023\066\025\063\045" +
    "\051\047\070\071\037\072\064\001\002\000\030\006\055" +
    "\011\047\013\054\015\050\017\046\023\066\025\063\045" +
    "\051\047\070\071\037\072\064\001\002\000\010\011\047" +
    "\013\054\045\125\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\050\004\uff9e\007\uff9e\010" +
    "\uff9e\014\uff9e\044\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\054\110\056\111\057\104\060\102\061\uff9e\062" +
    "\uff9e\063\uff9e\070\uff9e\071\uff9e\001\002\000\050\004\uffa3" +
    "\007\uffa3\010\uffa3\014\uffa3\044\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\070\uffa3\071\uffa3\001\002\000" +
    "\050\004\uffa4\007\uffa4\010\uffa4\014\uffa4\044\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\070\uffa4\071\uffa4" +
    "\001\002\000\050\004\uff89\007\uff89\010\uff89\014\uff89\044" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\054\110" +
    "\056\111\057\104\060\102\061\075\062\112\063\106\070" +
    "\uff89\071\uff89\001\002\000\050\004\uff9d\007\uff9d\010\uff9d" +
    "\014\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\054\110\056\111\057\104\060\102\061\uff9d\062\uff9d" +
    "\063\uff9d\070\uff9d\071\uff9d\001\002\000\050\004\uff88\007" +
    "\uff88\010\uff88\014\uff88\044\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\054\110\056\111\057\104\060\102\061" +
    "\075\062\112\063\106\070\uff88\071\uff88\001\002\000\050" +
    "\004\uffa2\007\uffa2\010\uffa2\014\uffa2\044\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\070\uffa2\071\uffa2\001" +
    "\002\000\050\004\uff8b\007\uff8b\010\uff8b\014\uff8b\044\uff8b" +
    "\046\uff8b\047\uff8b\050\107\051\105\052\101\054\110\056" +
    "\111\057\104\060\102\061\075\062\112\063\106\070\077" +
    "\071\uff8b\001\002\000\050\004\uffa1\007\uffa1\010\uffa1\014" +
    "\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\054\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\070\uffa1\071\uffa1\001\002\000\050\004\uff87\007\uff87" +
    "\010\uff87\014\uff87\044\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\054\110\056\111\057\104\060\102\061\075" +
    "\062\112\063\106\070\uff87\071\uff87\001\002\000\050\004" +
    "\uff9c\007\uff9c\010\uff9c\014\uff9c\044\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\054\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\070\uff9c\071\uff9c\001\002" +
    "\000\050\004\uff9b\007\uff9b\010\uff9b\014\uff9b\044\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\070\uff9b\071" +
    "\uff9b\001\002\000\050\004\uff9a\007\uff9a\010\uff9a\014\uff9a" +
    "\044\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\070\uff9a\071\uff9a\001\002\000\050\004\uff86\007\uff86\010" +
    "\uff86\014\uff86\044\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\054\110\056\111\057\104\060\102\061\075\062" +
    "\112\063\106\070\uff86\071\uff86\001\002\000\050\004\uff8a" +
    "\007\uff8a\010\uff8a\014\uff8a\044\uff8a\046\uff8a\047\uff8a\050" +
    "\107\051\105\052\101\054\110\056\111\057\104\060\102" +
    "\061\075\062\112\063\106\070\077\071\uff8a\001\002\000" +
    "\050\004\uff9f\007\uff9f\010\uff9f\014\uff9f\044\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\054\110\056\111\057" +
    "\104\060\102\061\uff9f\062\uff9f\063\uff9f\070\uff9f\071\uff9f" +
    "\001\002\000\004\045\134\001\002\000\004\006\135\001" +
    "\002\000\032\006\055\007\uffaa\011\047\013\054\015\050" +
    "\017\046\023\066\025\063\045\051\047\070\071\037\072" +
    "\064\001\002\000\042\007\uffac\010\142\044\100\046\103" +
    "\047\076\050\107\051\105\052\101\054\110\056\111\057" +
    "\104\060\102\061\075\062\112\063\106\070\077\001\002" +
    "\000\004\007\uffab\001\002\000\004\007\141\001\002\000" +
    "\050\004\uffae\007\uffae\010\uffae\014\uffae\044\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\054\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\070\uffae\071\uffae" +
    "\001\002\000\030\006\055\011\047\013\054\015\050\017" +
    "\046\023\066\025\063\045\051\047\070\071\037\072\064" +
    "\001\002\000\004\007\uffad\001\002\000\006\013\054\045" +
    "\051\001\002\000\052\004\uff98\007\uff98\010\uff98\014\uff98" +
    "\016\162\044\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052" +
    "\uff98\054\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\070\uff98\071\uff98\001\002\000\052\004\uff99\007" +
    "\uff99\010\uff99\014\uff99\016\147\044\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\054\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\070\uff99\071\uff99\001\002" +
    "\000\006\013\054\045\051\001\002\000\004\016\153\001" +
    "\002\000\050\004\uff94\007\uff94\010\uff94\014\uff94\044\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94\056" +
    "\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\070\uff94" +
    "\071\uff94\001\002\000\004\016\144\001\002\000\006\013" +
    "\054\045\051\001\002\000\052\004\uff96\007\uff96\010\uff96" +
    "\014\uff96\016\160\044\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\054\uff96\056\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\063\uff96\070\uff96\071\uff96\001\002\000\052\004" +
    "\uff97\007\uff97\010\uff97\014\uff97\016\156\044\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\054\uff97\056\uff97\057" +
    "\uff97\060\uff97\061\uff97\062\uff97\063\uff97\070\uff97\071\uff97" +
    "\001\002\000\006\013\054\045\051\001\002\000\050\004" +
    "\uff93\007\uff93\010\uff93\014\uff93\044\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\054\uff93\056\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\070\uff93\071\uff93\001\002" +
    "\000\006\013\054\045\051\001\002\000\050\004\uff95\007" +
    "\uff95\010\uff95\014\uff95\044\uff95\046\uff95\047\uff95\050\uff95" +
    "\051\uff95\052\uff95\054\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\070\uff95\071\uff95\001\002\000\006" +
    "\013\054\045\051\001\002\000\050\004\uff92\007\uff92\010" +
    "\uff92\014\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92" +
    "\052\uff92\054\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062" +
    "\uff92\063\uff92\070\uff92\071\uff92\001\002\000\040\007\165" +
    "\044\100\046\103\047\076\050\107\051\105\052\101\054" +
    "\110\056\111\057\104\060\102\061\075\062\112\063\106" +
    "\070\077\001\002\000\050\004\uffcc\007\uffcc\010\uffcc\014" +
    "\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\070\uffcc\071\uffcc\001\002\000\042\010\171\014\uffb7" +
    "\044\100\046\103\047\076\050\107\051\105\052\101\054" +
    "\110\056\111\057\104\060\102\061\075\062\112\063\106" +
    "\070\077\001\002\000\004\014\170\001\002\000\052\004" +
    "\uffb9\007\uffb9\010\uffb9\014\uffb9\016\uffb9\044\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\070\uffb9\071\uffb9" +
    "\001\002\000\032\006\055\011\047\013\054\014\uffb6\015" +
    "\050\017\046\023\066\025\063\045\051\047\070\071\037" +
    "\072\064\001\002\000\004\014\uffb8\001\002\000\004\045" +
    "\051\001\002\000\004\045\175\001\002\000\054\004\uffca" +
    "\007\uffca\010\uffca\014\uffca\016\uffca\044\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\070\uffca\071" +
    "\uffca\001\002\000\004\014\177\001\002\000\054\004\uffc9" +
    "\007\uffc9\010\uffc9\014\uffc9\016\uffc9\044\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\070\uffc9\071" +
    "\uffc9\001\002\000\050\004\uffa0\007\uffa0\010\uffa0\014\uffa0" +
    "\044\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\054" +
    "\110\056\111\057\104\060\102\061\uffa0\062\uffa0\063\uffa0" +
    "\070\uffa0\071\uffa0\001\002\000\060\002\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\045" +
    "\ufff5\053\ufff5\055\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\071\ufff5\001\002\000\004\012\233\001\002\000\060\002" +
    "\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\012\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\043\ufff2\045\ufff2\053\ufff2\055\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\071\ufff2\001\002\000\004\054\226\001" +
    "\002\000\060\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6" +
    "\012\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\043\ufff6\045\ufff6\053\ufff6\055\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\071\ufff6\001\002\000" +
    "\060\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\012\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\043\ufff0\045\ufff0\053\ufff0\055\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\071\ufff0\001\002\000\004\054" +
    "\221\001\002\000\060\002\ufff3\004\ufff3\005\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\045\ufff3\053\ufff3" +
    "\055\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\071\ufff3\001" +
    "\002\000\004\005\215\001\002\000\060\002\ufff7\004\ufff7" +
    "\005\ufff7\007\ufff7\010\ufff7\012\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7" +
    "\045\ufff7\053\ufff7\055\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\071\ufff7\001\002\000\060\002\ufff1\004\ufff1\005\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\045\ufff1" +
    "\053\ufff1\055\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\071" +
    "\ufff1\001\002\000\060\002\ufff4\004\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\045\ufff4\053\ufff4" +
    "\055\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\071\ufff4\001" +
    "\002\000\022\020\203\021\204\022\207\024\206\026\210" +
    "\027\201\030\214\031\213\001\002\000\004\010\217\001" +
    "\002\000\024\012\uffba\020\203\021\204\022\207\024\206" +
    "\026\210\027\201\030\214\031\213\001\002\000\004\012" +
    "\uffbb\001\002\000\024\020\203\021\204\022\207\024\206" +
    "\026\210\027\201\030\214\031\213\045\222\001\002\000" +
    "\004\055\225\001\002\000\004\055\224\001\002\000\060" +
    "\002\uff91\004\uff91\005\uff91\007\uff91\010\uff91\012\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\043\uff91\045\uff91\053\uff91\055\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\071\uff91\001\002\000\060\002\uff90" +
    "\004\uff90\005\uff90\007\uff90\010\uff90\012\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\043\uff90\045\uff90\053\uff90\055\uff90\064\uff90\065\uff90\066" +
    "\uff90\067\uff90\071\uff90\001\002\000\022\020\203\021\204" +
    "\022\207\024\206\026\210\027\201\030\214\031\213\001" +
    "\002\000\004\010\230\001\002\000\022\020\203\021\204" +
    "\022\207\024\206\026\210\027\201\030\214\031\213\001" +
    "\002\000\004\055\232\001\002\000\060\002\uff8c\004\uff8c" +
    "\005\uff8c\007\uff8c\010\uff8c\012\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\043\uff8c" +
    "\045\uff8c\053\uff8c\055\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\071\uff8c\001\002\000\050\004\uffbc\007\uffbc\010\uffbc" +
    "\014\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\070\uffbc\071\uffbc\001\002\000\040\004\235\044" +
    "\100\046\103\047\076\050\107\051\105\052\101\054\110" +
    "\056\111\057\104\060\102\061\075\062\112\063\106\070" +
    "\077\001\002\000\044\002\uffdb\012\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043" +
    "\uffdb\045\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\071\uffdb" +
    "\001\002\000\004\004\240\001\002\000\044\002\uffa7\012" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\043\uffa7\045\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\067\uffa7\071\uffa7\001\002\000\044\002\uffa6\012\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\043\uffa6\045\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\067\uffa6\071\uffa6\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\040\007\243\044\100\046" +
    "\103\047\076\050\107\051\105\052\101\054\110\056\111" +
    "\057\104\060\102\061\075\062\112\063\106\070\077\001" +
    "\002\000\004\042\244\001\002\000\030\032\015\033\025" +
    "\035\017\037\012\040\034\041\006\045\022\064\021\066" +
    "\010\067\036\071\037\001\002\000\006\034\246\043\247" +
    "\001\002\000\044\002\uffa8\012\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043\uffa8" +
    "\045\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\071\uffa8\001" +
    "\002\000\030\032\015\033\025\035\017\037\012\040\034" +
    "\041\006\045\022\064\021\066\010\067\036\071\037\001" +
    "\002\000\004\034\251\001\002\000\044\002\uffa9\012\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\043\uffa9\045\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\071\uffa9\001\002\000\044\002\uffe5\012\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\043\uffe5\045\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\071\uffe5\001\002\000\024\020\203\021\204\022\207" +
    "\024\206\026\210\027\201\030\214\031\213\045\254\001" +
    "\002\000\050\002\uffc1\004\256\012\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043" +
    "\uffc1\045\uffc1\053\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\071\uffc1\001\002\000\050\002\uffc1\004\256\012\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\043\uffc1\045\uffc1\053\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\071\uffc1\001\002\000\046\002\uffc2\012\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\043\uffc2\045\uffc2\053\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\071\uffc2\001\002\000\046\002\uffc4\012" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\043\uffc4\045\uffc4\053\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\071\uffc4\001\002\000\046\002\uffc3" +
    "\012\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\043\uffc3\045\uffc3\053\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\071\uffc3\001\002\000\044\002" +
    "\uff8e\012\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\043\uff8e\045\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\071\uff8e\001\002\000\040\004\263" +
    "\044\100\046\103\047\076\050\107\051\105\052\101\054" +
    "\110\056\111\057\104\060\102\061\075\062\112\063\106" +
    "\070\077\001\002\000\044\002\uff8d\012\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\043\uff8d\045\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\071" +
    "\uff8d\001\002\000\016\002\uffe0\012\uffe0\034\uffe0\036\uffe0" +
    "\043\uffe0\065\uffe0\001\002\000\004\036\266\001\002\000" +
    "\044\002\uffa5\012\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\071\uffa5\001\002\000\016" +
    "\002\uffdd\012\uffdd\034\uffdd\036\uffdd\043\uffdd\065\uffdd\001" +
    "\002\000\004\045\274\001\002\000\004\045\272\001\002" +
    "\000\004\004\273\001\002\000\044\002\uffb0\012\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\045\uffb0\064\uffb0\065\uffb0\066\uffb0\067" +
    "\uffb0\071\uffb0\001\002\000\004\004\275\001\002\000\044" +
    "\002\uffaf\012\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\045\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\071\uffaf\001\002\000\030\006" +
    "\055\011\047\013\054\015\050\017\046\023\066\025\063" +
    "\045\051\047\070\071\037\072\064\001\002\000\040\004" +
    "\300\044\100\046\103\047\076\050\107\051\105\052\101" +
    "\054\110\056\111\057\104\060\102\061\075\062\112\063" +
    "\106\070\077\001\002\000\044\002\uffbd\012\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\043\uffbd\045\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd" +
    "\071\uffbd\001\002\000\004\011\302\001\002\000\004\045" +
    "\304\001\002\000\004\012\314\001\002\000\004\005\305" +
    "\001\002\000\024\020\203\021\204\022\207\024\206\026" +
    "\210\027\201\030\214\031\213\045\306\001\002\000\006" +
    "\010\311\012\uffb1\001\002\000\006\010\311\012\uffb1\001" +
    "\002\000\004\012\uffb3\001\002\000\004\045\304\001\002" +
    "\000\004\012\uffb2\001\002\000\004\012\uffb4\001\002\000" +
    "\004\004\315\001\002\000\044\002\uffb5\012\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\043\uffb5\045\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\071\uffb5\001\002\000\004\002\001\001\002\000\004\004" +
    "\320\001\002\000\044\002\uffda\012\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\043" +
    "\uffda\045\uffda\064\uffda\065\uffda\066\uffda\067\uffda\071\uffda" +
    "\001\002\000\032\002\ufffe\032\015\033\025\035\017\037" +
    "\012\040\034\041\006\045\022\064\021\066\010\067\036" +
    "\071\037\001\002\000\004\011\323\001\002\000\030\032" +
    "\015\033\025\035\017\037\012\040\034\041\006\045\022" +
    "\064\021\066\010\067\036\071\037\001\002\000\004\012" +
    "\325\001\002\000\004\004\326\001\002\000\032\002\uff8f" +
    "\032\uff8f\033\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f\045" +
    "\uff8f\064\uff8f\066\uff8f\067\uff8f\071\uff8f\001\002\000\004" +
    "\002\000\001\002\000\004\006\331\001\002\000\006\007" +
    "\ufff8\045\332\001\002\000\004\005\344\001\002\000\004" +
    "\007\334\001\002\000\004\011\335\001\002\000\030\032" +
    "\015\033\025\035\017\037\012\040\034\041\006\045\022" +
    "\064\021\066\010\067\036\071\037\001\002\000\004\012" +
    "\337\001\002\000\006\004\ufffb\005\341\001\002\000\004" +
    "\004\343\001\002\000\022\020\203\021\204\022\207\024" +
    "\206\026\210\027\201\030\214\031\213\001\002\000\004" +
    "\004\ufffc\001\002\000\044\002\ufffd\012\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\043\ufffd\045\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\071" +
    "\ufffd\001\002\000\022\020\203\021\204\022\207\024\206" +
    "\026\210\027\201\030\214\031\213\001\002\000\006\007" +
    "\ufff9\010\346\001\002\000\006\007\ufff8\045\332\001\002" +
    "\000\004\007\ufffa\001\002\000\030\006\055\011\047\013" +
    "\054\015\050\017\046\023\066\025\063\045\051\047\070" +
    "\071\037\072\064\001\002\000\004\004\355\001\002\000" +
    "\042\004\uffbf\010\353\044\100\046\103\047\076\050\107" +
    "\051\105\052\101\054\110\056\111\057\104\060\102\061" +
    "\075\062\112\063\106\070\077\001\002\000\030\006\055" +
    "\011\047\013\054\015\050\017\046\023\066\025\063\045" +
    "\051\047\070\071\037\072\064\001\002\000\004\004\uffbe" +
    "\001\002\000\044\002\uffc0\012\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0" +
    "\045\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\071\uffc0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\056\002\037\003\026\005\004\007\027\010" +
    "\041\011\003\013\030\016\022\020\013\021\043\022\031" +
    "\023\025\043\042\044\023\050\010\054\034\056\006\060" +
    "\012\062\040\063\032\064\015\065\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\320\001\001\000\004\060\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\042\270\053\211\055\204\001\001\000\052\002\266" +
    "\003\026\005\004\007\027\010\041\011\003\013\030\016" +
    "\022\020\013\021\043\022\031\023\025\043\042\044\023" +
    "\054\034\060\012\062\040\063\032\064\015\065\017\001" +
    "\001\000\052\002\264\003\026\005\004\007\027\010\041" +
    "\011\003\013\030\016\022\020\013\021\043\022\031\023" +
    "\025\043\042\044\023\054\034\060\012\062\040\063\032" +
    "\064\015\065\017\001\001\000\042\003\263\010\041\011" +
    "\003\013\030\016\022\020\013\021\043\022\031\023\025" +
    "\043\042\044\023\054\034\060\012\062\040\063\032\065" +
    "\017\001\001\000\034\006\261\024\072\025\057\026\066" +
    "\027\056\031\061\032\051\034\060\037\055\040\071\041" +
    "\070\044\052\060\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\233\024\072\025\057\026\066" +
    "\027\056\031\061\032\051\034\060\037\055\040\071\041" +
    "\070\044\052\060\044\001\001\000\034\006\064\024\072" +
    "\025\057\026\066\027\056\031\061\032\051\034\060\037" +
    "\055\040\071\041\070\044\052\060\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\035\201\042\210\053\211\055\204\001\001\000" +
    "\034\006\177\024\072\025\057\026\066\027\056\031\061" +
    "\032\051\034\060\037\055\040\071\041\070\044\052\060" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\165\024\072\025\057\026\066\027" +
    "\056\031\061\032\051\034\060\036\166\037\055\040\071" +
    "\041\070\044\052\060\044\001\001\000\034\006\163\024" +
    "\072\025\057\026\066\027\056\031\061\032\051\034\060" +
    "\037\055\040\071\041\070\044\052\060\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\073\024\072\025\057\026\066\027\056\031" +
    "\061\032\051\034\060\037\055\040\071\041\070\044\052" +
    "\060\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\131\024\072" +
    "\025\057\026\066\027\056\031\061\032\051\034\060\037" +
    "\055\040\071\041\070\044\052\060\044\001\001\000\034" +
    "\006\130\024\072\025\057\026\066\027\056\031\061\032" +
    "\051\034\060\037\055\040\071\041\070\044\052\060\044" +
    "\001\001\000\034\006\127\024\072\025\057\026\066\027" +
    "\056\031\061\032\051\034\060\037\055\040\071\041\070" +
    "\044\052\060\044\001\001\000\006\027\126\034\125\001" +
    "\001\000\034\006\123\024\072\025\057\026\066\027\056" +
    "\031\061\032\051\034\060\037\055\040\071\041\070\044" +
    "\052\060\044\001\001\000\034\006\122\024\072\025\057" +
    "\026\066\027\056\031\061\032\051\034\060\037\055\040" +
    "\071\041\070\044\052\060\044\001\001\000\034\006\121" +
    "\024\072\025\057\026\066\027\056\031\061\032\051\034" +
    "\060\037\055\040\071\041\070\044\052\060\044\001\001" +
    "\000\034\006\120\024\072\025\057\026\066\027\056\031" +
    "\061\032\051\034\060\037\055\040\071\041\070\044\052" +
    "\060\044\001\001\000\034\006\117\024\072\025\057\026" +
    "\066\027\056\031\061\032\051\034\060\037\055\040\071" +
    "\041\070\044\052\060\044\001\001\000\034\006\116\024" +
    "\072\025\057\026\066\027\056\031\061\032\051\034\060" +
    "\037\055\040\071\041\070\044\052\060\044\001\001\000" +
    "\034\006\115\024\072\025\057\026\066\027\056\031\061" +
    "\032\051\034\060\037\055\040\071\041\070\044\052\060" +
    "\044\001\001\000\034\006\114\024\072\025\057\026\066" +
    "\027\056\031\061\032\051\034\060\037\055\040\071\041" +
    "\070\044\052\060\044\001\001\000\034\006\113\024\072" +
    "\025\057\026\066\027\056\031\061\032\051\034\060\037" +
    "\055\040\071\041\070\044\052\060\044\001\001\000\034" +
    "\006\112\024\072\025\057\026\066\027\056\031\061\032" +
    "\051\034\060\037\055\040\071\041\070\044\052\060\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\135" +
    "\024\072\025\057\026\066\027\056\031\061\032\051\034" +
    "\060\037\055\040\071\041\070\044\052\045\137\046\136" +
    "\060\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\135\024\072" +
    "\025\057\026\066\027\056\031\061\032\051\034\060\037" +
    "\055\040\071\041\070\044\052\046\142\060\044\001\001" +
    "\000\002\001\001\000\006\027\145\060\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\151\032\150" +
    "\060\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\154\060\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\151\032\156\060" +
    "\147\001\001\000\002\001\001\000\010\027\151\032\160" +
    "\060\147\001\001\000\002\001\001\000\010\027\151\032" +
    "\162\060\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\165\024\072\025\057\026\066" +
    "\027\056\031\061\032\051\034\060\036\171\037\055\040" +
    "\071\041\070\044\052\060\044\001\001\000\002\001\001" +
    "\000\004\060\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\215" +
    "\053\211\055\204\001\001\000\002\001\001\000\012\035" +
    "\217\042\210\053\211\055\204\001\001\000\002\001\001" +
    "\000\010\042\222\053\211\055\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\226\053\211\055\204\001\001\000\002\001" +
    "\001\000\010\042\230\053\211\055\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\241\024\072\025\057\026" +
    "\066\027\056\031\061\032\051\034\060\037\055\040\071" +
    "\041\070\044\052\060\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\002\244\003\026\005\004\007\027" +
    "\010\041\011\003\013\030\016\022\020\013\021\043\022" +
    "\031\023\025\043\042\044\023\054\034\060\012\062\040" +
    "\063\032\064\015\065\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\002\247\003\026\005\004\007\027" +
    "\010\041\011\003\013\030\016\022\020\013\021\043\022" +
    "\031\023\025\043\042\044\023\054\034\060\012\062\040" +
    "\063\032\064\015\065\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\254\053\211" +
    "\055\204\001\001\000\004\051\257\001\001\000\004\051" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\276\024\072\025\057\026\066\027" +
    "\056\031\061\032\051\034\060\037\055\040\071\041\070" +
    "\044\052\060\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\306\053\211\055" +
    "\204\001\001\000\004\052\312\001\001\000\004\052\307" +
    "\001\001\000\002\001\001\000\004\012\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\002\037\003\026\005\004\007\027\010\041" +
    "\011\003\013\030\016\022\020\013\021\043\022\031\023" +
    "\025\043\042\044\023\054\034\056\326\060\012\062\040" +
    "\063\032\064\015\065\017\001\001\000\002\001\001\000" +
    "\052\002\323\003\026\005\004\007\027\010\041\011\003" +
    "\013\030\016\022\020\013\021\043\022\031\023\025\043" +
    "\042\044\023\054\034\060\012\062\040\063\032\064\015" +
    "\065\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\002\335\003\026\005\004\007\027" +
    "\010\041\011\003\013\030\016\022\020\013\021\043\022" +
    "\031\023\025\043\042\044\023\054\034\060\012\062\040" +
    "\063\032\064\015\065\017\001\001\000\002\001\001\000" +
    "\004\017\337\001\001\000\002\001\001\000\010\042\341" +
    "\053\211\055\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\344\053\211\055\204\001\001\000\002" +
    "\001\001\000\004\014\346\001\001\000\002\001\001\000" +
    "\036\006\351\024\072\025\057\026\066\027\056\031\061" +
    "\032\051\034\060\037\055\040\071\041\070\044\052\057" +
    "\350\060\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\351\024\072\025\057\026\066\027\056\031" +
    "\061\032\051\034\060\037\055\040\071\041\070\044\052" +
    "\057\353\060\044\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_block main program_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_block ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL statements RCURL returnType SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // returnType ::= COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // returnType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameter ::= IDENTIFIER COLON data_type COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= IDENTIFIER COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements__ ::= break_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements__ ::= dictionary_binding 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements__ ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements__ ::= if_else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements__ ::= loop_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements__ ::= return_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements__ ::= typeDefinition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements__ ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements__ ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements__ ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements__ ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements__ ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements__ ::= read_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements__",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decla ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decla",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decla ::= declaration_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decla",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements_ ::= statements__ statements_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements_ ::= statements__ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statements ::= decla 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statements ::= decla statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements ::= statements_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // print_statement ::= PRINT expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // read_statement ::= READ identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= sequenceSlicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // identifier ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // identifier ::= IDENTIFIER LBRACKET identifier RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // data ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // data ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // data ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // data ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaration ::= IDENTIFIER COLON data_type dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= IDENTIFIER COLON IDENTIFIER dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration_assignment ::= declaration COLONEQ all_data SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // all_data ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // all_data ::= expression COMMA all_data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= identifier COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dictionary ::= LCURL dict_element RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dict_element ::= data_type COLON data_type COMMA dict_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dict_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sequence ::= LBRACKET seq_element RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seq_element ::= expression COMMA seq_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // seq_element ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // seq_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefinition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // objectArray ::= IDENTIFIER COLON IDENTIFIER arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // objectArray ::= IDENTIFIER COLON data_type arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arr ::= COMMA objectArray 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // alias ::= ALIAS data_type IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alias ::= ALIAS IDENTIFIER IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_call ::= QMARK expression QMARK IDENTIFIER LPAREN params RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // params_ ::= expression COMMA params_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // params_ ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // params ::= params_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // break_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // break_statement ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // loop_statement ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comparison ::= expression LT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comparison ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // equality ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // equality ::= expression NOTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_operations ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_operations ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolean_operations ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // boolean_operations ::= expression IMPLY expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // in ::= expression IN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // in ::= expression IN dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // in ::= expression IN sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concat ::= sequence COLONCOLON sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // concat ::= sequence COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // concat ::= identifier COLONCOLON sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // concat ::= identifier COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // concat ::= identifier COLONCOLON identifier COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // concat ::= sequence COLONCOLON sequence COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // concat ::= identifier COLONCOLON sequence COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // concat ::= sequence COLONCOLON identifier COLONCOLON concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // seq ::= SEQ LT data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // seq ::= SEQ LT IDENTIFIER GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // main ::= MAIN LCURL statements RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // return_ ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // return_ ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dict ::= DICT LT data_type COMMA data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operation ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operation ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operation ::= expression TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operation ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operation ::= expression MOD expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operation ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
