
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\050\005\000\002\056" +
    "\003\000\002\056\002\000\002\016\014\000\002\017\004" +
    "\000\002\017\002\000\002\014\007\000\002\014\005\000" +
    "\002\014\002\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\002\004" +
    "\000\002\002\003\000\002\062\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\060\003\000\002\060\005\000" +
    "\002\060\006\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\005\006\000\002\005" +
    "\006\000\002\051\003\000\002\051\002\000\002\007\006" +
    "\000\002\057\003\000\002\057\005\000\002\054\006\000" +
    "\002\034\005\000\002\035\007\000\002\035\002\000\002" +
    "\027\005\000\002\036\005\000\002\036\003\000\002\036" +
    "\002\000\002\011\010\000\002\012\006\000\002\012\006" +
    "\000\002\052\004\000\002\052\002\000\002\013\006\000" +
    "\002\013\006\000\002\044\011\000\002\046\005\000\002" +
    "\046\003\000\002\045\003\000\002\045\002\000\002\020" +
    "\013\000\002\020\011\000\002\022\004\000\002\022\005" +
    "\000\002\023\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\032\006\000\002\032\006\000\002\033\005\000\002" +
    "\033\005\000\002\033\002\000\002\053\006\000\002\053" +
    "\006\000\002\047\007\000\002\043\004\000\002\043\005" +
    "\000\002\055\010\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\004\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\030\032\014\033\022\035\015\037\011\040" +
    "\027\041\006\045\020\064\017\065\ufffe\067\033\071\032" +
    "\001\002\000\044\002\ufff0\012\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0" +
    "\045\ufff0\053\342\064\ufff0\065\ufff0\067\ufff0\071\ufff0\001" +
    "\002\000\042\002\uffe8\012\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\045" +
    "\uffe8\064\uffe8\065\uffe8\067\uffe8\071\uffe8\001\002\000\004" +
    "\045\322\001\002\000\004\065\314\001\002\000\004\002" +
    "\312\001\002\000\004\045\275\001\002\000\004\053\272" +
    "\001\002\000\042\002\uffec\012\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043\uffec" +
    "\045\uffec\064\uffec\065\uffec\067\uffec\071\uffec\001\002\000" +
    "\022\020\163\021\164\022\166\026\167\027\161\030\173" +
    "\031\172\045\264\001\002\000\026\032\014\033\022\035" +
    "\015\037\011\040\027\041\006\045\020\064\017\067\033" +
    "\071\032\001\002\000\042\002\uffe3\012\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\043\uffe3\045\uffe3\064\uffe3\065\uffe3\067\uffe3\071\uffe3\001" +
    "\002\000\034\004\257\006\047\011\042\013\050\017\043" +
    "\020\066\022\062\023\061\025\056\045\045\047\063\071" +
    "\032\072\057\001\002\000\012\005\251\013\135\053\uffd3" +
    "\073\136\001\002\000\004\004\250\001\002\000\004\006" +
    "\237\001\002\000\042\002\uffea\012\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043" +
    "\uffea\045\uffea\064\uffea\065\uffea\067\uffea\071\uffea\001\002" +
    "\000\042\002\uffe1\012\uffe1\032\014\033\022\034\uffe1\035" +
    "\015\036\uffe1\037\011\040\027\041\006\043\uffe1\045\020" +
    "\064\017\065\uffe1\067\033\071\032\001\002\000\042\002" +
    "\uffef\012\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\043\uffef\045\uffef\064\uffef\065" +
    "\uffef\067\uffef\071\uffef\001\002\000\042\002\uffe6\012\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\043\uffe6\045\uffe6\064\uffe6\065\uffe6\067\uffe6" +
    "\071\uffe6\001\002\000\006\004\234\023\233\001\002\000" +
    "\042\002\uffee\012\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee\045\uffee\064" +
    "\uffee\065\uffee\067\uffee\071\uffee\001\002\000\042\002\uffe5" +
    "\012\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\043\uffe5\045\uffe5\064\uffe5\065\uffe5" +
    "\067\uffe5\071\uffe5\001\002\000\032\006\047\011\042\013" +
    "\050\017\043\020\066\022\062\023\061\025\056\045\045" +
    "\047\063\071\032\072\057\001\002\000\032\006\047\011" +
    "\042\013\050\017\043\020\066\022\062\023\061\025\056" +
    "\045\045\047\063\071\032\072\057\001\002\000\006\002" +
    "\uffff\065\uffff\001\002\000\042\002\uffe7\012\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\043\uffe7\045\uffe7\064\uffe7\065\uffe7\067\uffe7\071\uffe7" +
    "\001\002\000\042\002\uffed\012\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed" +
    "\045\uffed\064\uffed\065\uffed\067\uffed\071\uffed\001\002\000" +
    "\042\002\uffe9\012\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\045\uffe9\064" +
    "\uffe9\065\uffe9\067\uffe9\071\uffe9\001\002\000\042\002\uffeb" +
    "\012\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\043\uffeb\045\uffeb\064\uffeb\065\uffeb" +
    "\067\uffeb\071\uffeb\001\002\000\036\004\uffdd\007\uffdd\010" +
    "\uffdd\014\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\054\213\056\214\070\uffdd\071\uffdd\001\002\000" +
    "\022\012\uffc2\020\163\021\164\022\166\026\167\027\161" +
    "\030\173\031\172\001\002\000\032\004\uffcf\007\uffcf\010" +
    "\uffcf\014\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\070\uffcf\071\uffcf\001\002\000\032\004\uffd5\007" +
    "\uffd5\010\uffd5\014\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\070\uffd5\071\uffd5\001\002\000\044\004" +
    "\uffd3\007\uffd3\010\uffd3\013\135\014\uffd3\016\156\044\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\056" +
    "\uffd3\070\uffd3\071\uffd3\073\136\001\002\000\032\004\uffd4" +
    "\007\uffd4\010\uffd4\014\uffd4\044\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\070\uffd4\071\uffd4\001\002\000\032" +
    "\006\047\011\042\013\050\017\043\020\066\022\062\023" +
    "\061\025\056\045\045\047\063\071\032\072\057\001\002" +
    "\000\034\006\047\011\042\013\050\014\uffbe\017\043\020" +
    "\066\022\062\023\061\025\056\045\045\047\063\071\032" +
    "\072\057\001\002\000\032\004\uffd7\007\uffd7\010\uffd7\014" +
    "\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\070\uffd7\071\uffd7\001\002\000\032\004\uffda\007\uffda\010" +
    "\uffda\014\uffda\044\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\070\uffda\071\uffda\001\002\000\032\004\uffd9\007" +
    "\uffd9\010\uffd9\014\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\070\uffd9\071\uffd9\001\002\000\032\004" +
    "\uffde\007\uffde\010\uffde\014\uffde\044\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\070\uffde\071\uffde\001\002\000" +
    "\032\004\uffdb\007\uffdb\010\uffdb\014\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\070\uffdb\071\uffdb\001" +
    "\002\000\032\004\uffce\007\uffce\010\uffce\014\uffce\044\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\070\uffce\071" +
    "\uffce\001\002\000\032\004\uffcd\007\uffcd\010\uffcd\014\uffcd" +
    "\044\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\070" +
    "\uffcd\071\uffcd\001\002\000\022\004\146\044\077\046\101" +
    "\047\102\050\104\051\103\052\076\070\100\001\002\000" +
    "\042\004\uffd0\007\uffd0\010\uffd0\014\uffd0\044\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\126\056\131\057" +
    "\127\060\130\070\uffd0\071\uffd0\001\002\000\004\016\116" +
    "\001\002\000\032\006\047\011\042\013\050\017\043\020" +
    "\066\022\062\023\061\025\056\045\045\047\063\071\032" +
    "\072\057\001\002\000\032\004\uffd8\007\uffd8\010\uffd8\014" +
    "\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\070\uffd8\071\uffd8\001\002\000\032\004\uffd6\007\uffd6\010" +
    "\uffd6\014\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\070\uffd6\071\uffd6\001\002\000\006\057\071\060" +
    "\072\001\002\000\032\004\uffdf\007\uffdf\010\uffdf\014\uffdf" +
    "\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\070" +
    "\uffdf\071\uffdf\001\002\000\032\004\uffdc\007\uffdc\010\uffdc" +
    "\014\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\070\uffdc\071\uffdc\001\002\000\004\020\074\001\002" +
    "\000\004\020\073\001\002\000\032\004\uffa1\007\uffa1\010" +
    "\uffa1\014\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\070\uffa1\071\uffa1\001\002\000\032\004\uffa3\007" +
    "\uffa3\010\uffa3\014\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\070\uffa3\071\uffa3\001\002\000\032\004" +
    "\uff8c\007\uff8c\010\uff8c\014\uff8c\044\uff8c\046\uff8c\047\uff8c" +
    "\050\104\051\103\052\076\070\100\071\uff8c\001\002\000" +
    "\032\006\047\011\042\013\050\017\043\020\066\022\062" +
    "\023\061\025\056\045\045\047\063\071\032\072\057\001" +
    "\002\000\010\011\042\013\050\045\112\001\002\000\032" +
    "\006\047\011\042\013\050\017\043\020\066\022\062\023" +
    "\061\025\056\045\045\047\063\071\032\072\057\001\002" +
    "\000\032\006\047\011\042\013\050\017\043\020\066\022" +
    "\062\023\061\025\056\045\045\047\063\071\032\072\057" +
    "\001\002\000\032\006\047\011\042\013\050\017\043\020" +
    "\066\022\062\023\061\025\056\045\045\047\063\071\032" +
    "\072\057\001\002\000\032\006\047\011\042\013\050\017" +
    "\043\020\066\022\062\023\061\025\056\045\045\047\063" +
    "\071\032\072\057\001\002\000\032\006\047\011\042\013" +
    "\050\017\043\020\066\022\062\023\061\025\056\045\045" +
    "\047\063\071\032\072\057\001\002\000\032\004\uff90\007" +
    "\uff90\010\uff90\014\uff90\044\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\070\uff90\071\uff90\001\002\000\032\004" +
    "\uff8f\007\uff8f\010\uff8f\014\uff8f\044\uff8f\046\uff8f\047\uff8f" +
    "\050\uff8f\051\uff8f\052\uff8f\070\uff8f\071\uff8f\001\002\000" +
    "\032\004\uff91\007\uff91\010\uff91\014\uff91\044\uff91\046\uff91" +
    "\047\uff91\050\104\051\103\052\076\070\100\071\uff91\001" +
    "\002\000\032\004\uff92\007\uff92\010\uff92\014\uff92\044\uff92" +
    "\046\uff92\047\uff92\050\104\051\103\052\076\070\100\071" +
    "\uff92\001\002\000\032\004\uff8d\007\uff8d\010\uff8d\014\uff8d" +
    "\044\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\070" +
    "\uff8d\071\uff8d\001\002\000\032\004\uffa0\007\uffa0\010\uffa0" +
    "\014\uffa0\044\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\070\uffa0\071\uffa0\001\002\000\032\004\uff9e\007\uff9e" +
    "\010\uff9e\014\uff9e\044\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\070\uff9e\071\uff9e\001\002\000\032\004\uff9f" +
    "\007\uff9f\010\uff9f\014\uff9f\044\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\070\uff9f\071\uff9f\001\002\000\032" +
    "\004\uff8e\007\uff8e\010\uff8e\014\uff8e\044\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\070\uff8e\071\uff8e\001\002" +
    "\000\004\022\117\001\002\000\034\004\uff99\007\uff99\010" +
    "\uff99\014\uff99\016\120\044\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\070\uff99\071\uff99\001\002\000\006\022" +
    "\123\045\122\001\002\000\032\004\uff9d\007\uff9d\010\uff9d" +
    "\014\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\070\uff9d\071\uff9d\001\002\000\034\004\uff99\007\uff99" +
    "\010\uff99\014\uff99\016\120\044\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\070\uff99\071\uff99\001\002\000\034" +
    "\004\uff99\007\uff99\010\uff99\014\uff99\016\120\044\uff99\046" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\070\uff99\071\uff99" +
    "\001\002\000\032\004\uff9b\007\uff9b\010\uff9b\014\uff9b\044" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\070\uff9b" +
    "\071\uff9b\001\002\000\032\004\uff9a\007\uff9a\010\uff9a\014" +
    "\uff9a\044\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\070\uff9a\071\uff9a\001\002\000\006\023\145\045\134\001" +
    "\002\000\004\023\143\001\002\000\004\023\142\001\002" +
    "\000\006\023\133\045\134\001\002\000\032\004\uffa5\007" +
    "\uffa5\010\uffa5\014\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\070\uffa5\071\uffa5\001\002\000\032\004" +
    "\uffa8\007\uffa8\010\uffa8\014\uffa8\044\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\070\uffa8\071\uffa8\001\002\000" +
    "\036\004\uffd3\007\uffd3\010\uffd3\013\135\014\uffd3\044\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\070\uffd3\071" +
    "\uffd3\073\136\001\002\000\004\045\134\001\002\000\004" +
    "\045\137\001\002\000\040\004\uffd2\007\uffd2\010\uffd2\014" +
    "\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\056\uffd2\070\uffd2\071\uffd2\001\002\000" +
    "\004\014\141\001\002\000\040\004\uffd1\007\uffd1\010\uffd1" +
    "\014\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\056\uffd1\070\uffd1\071\uffd1\001\002" +
    "\000\032\004\uffa2\007\uffa2\010\uffa2\014\uffa2\044\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\070\uffa2\071\uffa2" +
    "\001\002\000\032\004\uffa4\007\uffa4\010\uffa4\014\uffa4\044" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\070\uffa4" +
    "\071\uffa4\001\002\000\032\004\uffaa\007\uffaa\010\uffaa\014" +
    "\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\070\uffaa\071\uffaa\001\002\000\032\004\uffa9\007\uffa9\010" +
    "\uffa9\014\uffa9\044\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\070\uffa9\071\uffa9\001\002\000\042\002\uffe0\012" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\043\uffe0\045\uffe0\064\uffe0\065\uffe0\067" +
    "\uffe0\071\uffe0\001\002\000\024\010\152\014\uffbf\044\077" +
    "\046\101\047\102\050\104\051\103\052\076\070\100\001" +
    "\002\000\004\014\151\001\002\000\032\004\uffc1\007\uffc1" +
    "\010\uffc1\014\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\070\uffc1\071\uffc1\001\002\000\034\006\047" +
    "\011\042\013\050\014\uffbe\017\043\020\066\022\062\023" +
    "\061\025\056\045\045\047\063\071\032\072\057\001\002" +
    "\000\004\014\uffc0\001\002\000\022\007\155\044\077\046" +
    "\101\047\102\050\104\051\103\052\076\070\100\001\002" +
    "\000\032\004\uff8b\007\uff8b\010\uff8b\014\uff8b\044\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\070\uff8b\071\uff8b" +
    "\001\002\000\004\045\157\001\002\000\034\004\uff99\007" +
    "\uff99\010\uff99\014\uff99\016\120\044\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\070\uff99\071\uff99\001\002\000" +
    "\032\004\uff9c\007\uff9c\010\uff9c\014\uff9c\044\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\070\uff9c\071\uff9c\001" +
    "\002\000\056\002\ufff5\004\ufff5\005\ufff5\007\ufff5\010\ufff5" +
    "\012\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\043\ufff5\045\ufff5\053\ufff5\055\ufff5" +
    "\064\ufff5\065\ufff5\067\ufff5\071\ufff5\001\002\000\004\012" +
    "\212\001\002\000\056\002\ufff2\004\ufff2\005\ufff2\007\ufff2" +
    "\010\ufff2\012\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\045\ufff2\053\ufff2" +
    "\055\ufff2\064\ufff2\065\ufff2\067\ufff2\071\ufff2\001\002\000" +
    "\004\054\205\001\002\000\056\002\ufff6\004\ufff6\005\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\032\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\045\ufff6" +
    "\053\ufff6\055\ufff6\064\ufff6\065\ufff6\067\ufff6\071\ufff6\001" +
    "\002\000\004\054\200\001\002\000\056\002\ufff3\004\ufff3" +
    "\005\ufff3\007\ufff3\010\ufff3\012\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\045\ufff3\053\ufff3\055\ufff3\064\ufff3\065\ufff3\067\ufff3\071" +
    "\ufff3\001\002\000\004\005\174\001\002\000\056\002\ufff7" +
    "\004\ufff7\005\ufff7\007\ufff7\010\ufff7\012\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\043\ufff7\045\ufff7\053\ufff7\055\ufff7\064\ufff7\065\ufff7\067" +
    "\ufff7\071\ufff7\001\002\000\056\002\ufff1\004\ufff1\005\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\045\ufff1" +
    "\053\ufff1\055\ufff1\064\ufff1\065\ufff1\067\ufff1\071\ufff1\001" +
    "\002\000\056\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4" +
    "\012\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\043\ufff4\045\ufff4\053\ufff4\055\ufff4" +
    "\064\ufff4\065\ufff4\067\ufff4\071\ufff4\001\002\000\020\020" +
    "\163\021\164\022\166\026\167\027\161\030\173\031\172" +
    "\001\002\000\004\010\176\001\002\000\022\012\uffc2\020" +
    "\163\021\164\022\166\026\167\027\161\030\173\031\172" +
    "\001\002\000\004\012\uffc3\001\002\000\022\020\163\021" +
    "\164\022\166\026\167\027\161\030\173\031\172\045\201" +
    "\001\002\000\004\055\204\001\002\000\004\055\203\001" +
    "\002\000\056\002\uff98\004\uff98\005\uff98\007\uff98\010\uff98" +
    "\012\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\043\uff98\045\uff98\053\uff98\055\uff98" +
    "\064\uff98\065\uff98\067\uff98\071\uff98\001\002\000\056\002" +
    "\uff97\004\uff97\005\uff97\007\uff97\010\uff97\012\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\043\uff97\045\uff97\053\uff97\055\uff97\064\uff97\065\uff97" +
    "\067\uff97\071\uff97\001\002\000\020\020\163\021\164\022" +
    "\166\026\167\027\161\030\173\031\172\001\002\000\004" +
    "\010\207\001\002\000\020\020\163\021\164\022\166\026" +
    "\167\027\161\030\173\031\172\001\002\000\004\055\211" +
    "\001\002\000\056\002\uff93\004\uff93\005\uff93\007\uff93\010" +
    "\uff93\012\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\043\uff93\045\uff93\053\uff93\055" +
    "\uff93\064\uff93\065\uff93\067\uff93\071\uff93\001\002\000\032" +
    "\004\uffc4\007\uffc4\010\uffc4\014\uffc4\044\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\070\uffc4\071\uffc4\001\002" +
    "\000\006\023\220\045\134\001\002\000\006\023\216\045" +
    "\134\001\002\000\032\004\uffa7\007\uffa7\010\uffa7\014\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\070" +
    "\uffa7\071\uffa7\001\002\000\032\004\uffa6\007\uffa6\010\uffa6" +
    "\014\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\070\uffa6\071\uffa6\001\002\000\032\004\uffac\007\uffac" +
    "\010\uffac\014\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\070\uffac\071\uffac\001\002\000\032\004\uffab" +
    "\007\uffab\010\uffab\014\uffab\044\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\070\uffab\071\uffab\001\002\000\022" +
    "\044\077\046\101\047\102\050\104\051\103\052\076\070" +
    "\100\071\222\001\002\000\004\045\223\001\002\000\004" +
    "\006\224\001\002\000\034\006\047\007\uffb2\011\042\013" +
    "\050\017\043\020\066\022\062\023\061\025\056\045\045" +
    "\047\063\071\032\072\057\001\002\000\024\007\uffb4\010" +
    "\231\044\077\046\101\047\102\050\104\051\103\052\076" +
    "\070\100\001\002\000\004\007\uffb3\001\002\000\004\007" +
    "\230\001\002\000\032\004\uffb6\007\uffb6\010\uffb6\014\uffb6" +
    "\044\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\070" +
    "\uffb6\071\uffb6\001\002\000\032\006\047\011\042\013\050" +
    "\017\043\020\066\022\062\023\061\025\056\045\045\047" +
    "\063\071\032\072\057\001\002\000\004\007\uffb5\001\002" +
    "\000\004\004\235\001\002\000\042\002\uffaf\012\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\043\uffaf\045\uffaf\064\uffaf\065\uffaf\067\uffaf\071" +
    "\uffaf\001\002\000\042\002\uffae\012\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\043" +
    "\uffae\045\uffae\064\uffae\065\uffae\067\uffae\071\uffae\001\002" +
    "\000\016\002\uffe2\012\uffe2\034\uffe2\036\uffe2\043\uffe2\065" +
    "\uffe2\001\002\000\032\006\047\011\042\013\050\017\043" +
    "\020\066\022\062\023\061\025\056\045\045\047\063\071" +
    "\032\072\057\001\002\000\022\007\241\044\077\046\101" +
    "\047\102\050\104\051\103\052\076\070\100\001\002\000" +
    "\004\042\242\001\002\000\026\032\014\033\022\035\015" +
    "\037\011\040\027\041\006\045\020\064\017\067\033\071" +
    "\032\001\002\000\006\034\244\043\245\001\002\000\042" +
    "\002\uffb0\012\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\064\uffb0" +
    "\065\uffb0\067\uffb0\071\uffb0\001\002\000\026\032\014\033" +
    "\022\035\015\037\011\040\027\041\006\045\020\064\017" +
    "\067\033\071\032\001\002\000\004\034\247\001\002\000" +
    "\042\002\uffb1\012\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\064" +
    "\uffb1\065\uffb1\067\uffb1\071\uffb1\001\002\000\042\002\uffe4" +
    "\012\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\043\uffe4\045\uffe4\064\uffe4\065\uffe4" +
    "\067\uffe4\071\uffe4\001\002\000\022\020\163\021\164\022" +
    "\166\026\167\027\161\030\173\031\172\045\252\001\002" +
    "\000\046\002\uffc9\004\254\012\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9" +
    "\045\uffc9\053\uffc9\064\uffc9\065\uffc9\067\uffc9\071\uffc9\001" +
    "\002\000\046\002\uffc9\004\254\012\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043" +
    "\uffc9\045\uffc9\053\uffc9\064\uffc9\065\uffc9\067\uffc9\071\uffc9" +
    "\001\002\000\044\002\uffca\012\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043\uffca" +
    "\045\uffca\053\uffca\064\uffca\065\uffca\067\uffca\071\uffca\001" +
    "\002\000\044\002\uffcc\012\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\045" +
    "\uffcc\053\uffcc\064\uffcc\065\uffcc\067\uffcc\071\uffcc\001\002" +
    "\000\044\002\uffcb\012\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\045\uffcb" +
    "\053\uffcb\064\uffcb\065\uffcb\067\uffcb\071\uffcb\001\002\000" +
    "\042\002\uff95\012\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\043\uff95\045\uff95\064" +
    "\uff95\065\uff95\067\uff95\071\uff95\001\002\000\022\004\261" +
    "\044\077\046\101\047\102\050\104\051\103\052\076\070" +
    "\100\001\002\000\042\002\uff94\012\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\043" +
    "\uff94\045\uff94\064\uff94\065\uff94\067\uff94\071\uff94\001\002" +
    "\000\004\036\263\001\002\000\042\002\uffad\012\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\043\uffad\045\uffad\064\uffad\065\uffad\067\uffad\071" +
    "\uffad\001\002\000\004\045\270\001\002\000\004\045\266" +
    "\001\002\000\004\004\267\001\002\000\042\002\uffb8\012" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\043\uffb8\045\uffb8\064\uffb8\065\uffb8\067" +
    "\uffb8\071\uffb8\001\002\000\004\004\271\001\002\000\042" +
    "\002\uffb7\012\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\045\uffb7\064\uffb7" +
    "\065\uffb7\067\uffb7\071\uffb7\001\002\000\032\006\047\011" +
    "\042\013\050\017\043\020\066\022\062\023\061\025\056" +
    "\045\045\047\063\071\032\072\057\001\002\000\022\004" +
    "\274\044\077\046\101\047\102\050\104\051\103\052\076" +
    "\070\100\001\002\000\042\002\uffc5\012\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\043\uffc5\045\uffc5\064\uffc5\065\uffc5\067\uffc5\071\uffc5\001" +
    "\002\000\004\011\276\001\002\000\004\045\300\001\002" +
    "\000\004\012\310\001\002\000\004\005\301\001\002\000" +
    "\022\020\163\021\164\022\166\026\167\027\161\030\173" +
    "\031\172\045\302\001\002\000\006\010\305\012\uffb9\001" +
    "\002\000\006\010\305\012\uffb9\001\002\000\004\012\uffbb" +
    "\001\002\000\004\045\300\001\002\000\004\012\uffba\001" +
    "\002\000\004\012\uffbc\001\002\000\004\004\311\001\002" +
    "\000\042\002\uffbd\012\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\045\uffbd" +
    "\064\uffbd\065\uffbd\067\uffbd\071\uffbd\001\002\000\004\002" +
    "\001\001\002\000\030\002\ufffe\032\014\033\022\035\015" +
    "\037\011\040\027\041\006\045\020\064\017\067\033\071" +
    "\032\001\002\000\004\011\315\001\002\000\026\032\014" +
    "\033\022\035\015\037\011\040\027\041\006\045\020\064" +
    "\017\067\033\071\032\001\002\000\004\012\317\001\002" +
    "\000\004\004\320\001\002\000\030\002\uff96\032\uff96\033" +
    "\uff96\035\uff96\037\uff96\040\uff96\041\uff96\045\uff96\064\uff96" +
    "\067\uff96\071\uff96\001\002\000\004\002\000\001\002\000" +
    "\004\006\323\001\002\000\006\007\ufff8\045\324\001\002" +
    "\000\004\005\336\001\002\000\004\007\326\001\002\000" +
    "\004\011\327\001\002\000\026\032\014\033\022\035\015" +
    "\037\011\040\027\041\006\045\020\064\017\067\033\071" +
    "\032\001\002\000\004\012\331\001\002\000\006\004\ufffb" +
    "\005\333\001\002\000\004\004\335\001\002\000\020\020" +
    "\163\021\164\022\166\026\167\027\161\030\173\031\172" +
    "\001\002\000\004\004\ufffc\001\002\000\042\002\ufffd\012" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\043\ufffd\045\ufffd\064\ufffd\065\ufffd\067" +
    "\ufffd\071\ufffd\001\002\000\020\020\163\021\164\022\166" +
    "\026\167\027\161\030\173\031\172\001\002\000\006\007" +
    "\ufff9\010\340\001\002\000\006\007\ufff8\045\324\001\002" +
    "\000\004\007\ufffa\001\002\000\032\006\047\011\042\013" +
    "\050\017\043\020\066\022\062\023\061\025\056\045\045" +
    "\047\063\071\032\072\057\001\002\000\004\004\347\001" +
    "\002\000\024\004\uffc7\010\345\044\077\046\101\047\102" +
    "\050\104\051\103\052\076\070\100\001\002\000\032\006" +
    "\047\011\042\013\050\017\043\020\066\022\062\023\061" +
    "\025\056\045\045\047\063\071\032\072\057\001\002\000" +
    "\004\004\uffc6\001\002\000\042\002\uffc8\012\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\043\uffc8\045\uffc8\064\uffc8\065\uffc8\067\uffc8\071\uffc8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\050\002\033\003\023\005\003\007\024\010" +
    "\035\011\004\013\025\016\015\020\012\021\037\022\027" +
    "\023\022\043\036\044\020\050\007\054\030\056\006\060" +
    "\011\062\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\264\053\170\055\164\001\001\000\044\002" +
    "\261\003\023\005\003\007\024\010\035\011\004\013\025" +
    "\016\015\020\012\021\037\022\027\023\022\043\036\044" +
    "\020\054\030\060\011\062\034\001\001\000\002\001\001" +
    "\000\034\006\257\024\067\025\052\026\063\027\051\031" +
    "\053\032\043\034\054\037\050\040\066\041\064\044\045" +
    "\060\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\235\003\023" +
    "\005\003\007\024\010\035\011\004\013\025\016\015\020" +
    "\012\021\037\022\027\023\022\043\036\044\020\054\030" +
    "\060\011\062\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\220\024\067\025\052\026\063\027\051\031" +
    "\053\032\043\034\054\037\050\040\066\041\064\044\045" +
    "\060\040\001\001\000\034\006\057\024\067\025\052\026" +
    "\063\027\051\031\053\032\043\034\054\037\050\040\066" +
    "\041\064\044\045\060\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\161\042\167\053" +
    "\170\055\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\153\024" +
    "\067\025\052\026\063\027\051\031\053\032\043\034\054" +
    "\037\050\040\066\041\064\044\045\060\040\001\001\000" +
    "\036\006\146\024\067\025\052\026\063\027\051\031\053" +
    "\032\043\034\054\036\147\037\050\040\066\041\064\044" +
    "\045\060\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\074\024\067\025" +
    "\052\026\063\027\051\031\053\032\043\034\054\037\050" +
    "\040\066\041\064\044\045\060\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\114\024\067\025\052\026\063\027\051\031\053\032" +
    "\043\034\054\037\050\040\066\041\064\044\045\060\040" +
    "\001\001\000\006\027\112\034\113\001\001\000\034\006" +
    "\110\024\067\025\052\026\063\027\051\031\053\032\043" +
    "\034\054\037\050\040\066\041\064\044\045\060\040\001" +
    "\001\000\034\006\107\024\067\025\052\026\063\027\051" +
    "\031\053\032\043\034\054\037\050\040\066\041\064\044" +
    "\045\060\040\001\001\000\034\006\106\024\067\025\052" +
    "\026\063\027\051\031\053\032\043\034\054\037\050\040" +
    "\066\041\064\044\045\060\040\001\001\000\034\006\105" +
    "\024\067\025\052\026\063\027\051\031\053\032\043\034" +
    "\054\037\050\040\066\041\064\044\045\060\040\001\001" +
    "\000\034\006\104\024\067\025\052\026\063\027\051\031" +
    "\053\032\043\034\054\037\050\040\066\041\064\044\045" +
    "\060\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\124\001\001\000" +
    "\004\033\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\146\024" +
    "\067\025\052\026\063\027\051\031\053\032\043\034\054" +
    "\036\152\037\050\040\066\041\064\044\045\060\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\174\053\170\055" +
    "\164\001\001\000\002\001\001\000\012\035\176\042\167" +
    "\053\170\055\164\001\001\000\002\001\001\000\010\042" +
    "\201\053\170\055\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\205\053\170\055\164\001\001\000\002\001\001\000\010" +
    "\042\207\053\170\055\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\216\001\001" +
    "\000\004\060\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\224\024" +
    "\067\025\052\026\063\027\051\031\053\032\043\034\054" +
    "\037\050\040\066\041\064\044\045\045\226\046\225\060" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\224\024\067\025" +
    "\052\026\063\027\051\031\053\032\043\034\054\037\050" +
    "\040\066\041\064\044\045\046\231\060\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\237\024\067\025" +
    "\052\026\063\027\051\031\053\032\043\034\054\037\050" +
    "\040\066\041\064\044\045\060\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\002\242\003\023\005\003" +
    "\007\024\010\035\011\004\013\025\016\015\020\012\021" +
    "\037\022\027\023\022\043\036\044\020\054\030\060\011" +
    "\062\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\002\245\003\023\005\003\007\024\010\035\011\004" +
    "\013\025\016\015\020\012\021\037\022\027\023\022\043" +
    "\036\044\020\054\030\060\011\062\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\252\053\170\055\164\001\001\000\004\051\255\001\001" +
    "\000\004\051\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\272\024\067\025\052\026\063\027\051\031\053\032\043" +
    "\034\054\037\050\040\066\041\064\044\045\060\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\302\053\170\055\164\001\001\000\004" +
    "\052\306\001\001\000\004\052\303\001\001\000\002\001" +
    "\001\000\004\012\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\002\033\003\023\005\003\007\024\010\035" +
    "\011\004\013\025\016\015\020\012\021\037\022\027\023" +
    "\022\043\036\044\020\054\030\056\320\060\011\062\034" +
    "\001\001\000\002\001\001\000\044\002\315\003\023\005" +
    "\003\007\024\010\035\011\004\013\025\016\015\020\012" +
    "\021\037\022\027\023\022\043\036\044\020\054\030\060" +
    "\011\062\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\327\003\023\005\003\007" +
    "\024\010\035\011\004\013\025\016\015\020\012\021\037" +
    "\022\027\023\022\043\036\044\020\054\030\060\011\062" +
    "\034\001\001\000\002\001\001\000\004\017\331\001\001" +
    "\000\002\001\001\000\010\042\333\053\170\055\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\336" +
    "\053\170\055\164\001\001\000\002\001\001\000\004\014" +
    "\340\001\001\000\002\001\001\000\036\006\343\024\067" +
    "\025\052\026\063\027\051\031\053\032\043\034\054\037" +
    "\050\040\066\041\064\044\045\057\342\060\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\343\024" +
    "\067\025\052\026\063\027\051\031\053\032\043\034\054" +
    "\037\050\040\066\041\064\044\045\057\345\060\040\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_block main program_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_block ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL statements RCURL returnType SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // returnType ::= COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // returnType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameter ::= IDENTIFIER COLON data_type COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= IDENTIFIER COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements_ ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements_ ::= declaration_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements_ ::= break_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements_ ::= dictionary_binding 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements_ ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements_ ::= if_else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements_ ::= loop_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements_ ::= return_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements_ ::= typeDefinition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements_ ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements_ ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements_ ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements_ ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements_ ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements ::= statements_ statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= statements_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print_statement ::= PRINT expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= sequenceSlicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // identifier ::= IDENTIFIER LBRACKET identifier RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // data ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // data ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // data ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // data ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= IDENTIFIER COLON data_type dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= IDENTIFIER COLON IDENTIFIER dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration_assignment ::= declaration COLONEQ all_data SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // all_data ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // all_data ::= expression COMMA all_data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment ::= identifier COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dictionary ::= LCURL dict_element RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dict_element ::= data_type COLON data_type COMMA dict_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dict_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sequence ::= LBRACKET seq_element RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // seq_element ::= expression COMMA seq_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // seq_element ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seq_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_element",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefinition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // objectArray ::= IDENTIFIER COLON IDENTIFIER arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // objectArray ::= IDENTIFIER COLON data_type arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arr ::= COMMA objectArray 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // alias ::= ALIAS data_type IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // alias ::= ALIAS IDENTIFIER IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_call ::= QMARK expression QMARK IDENTIFIER LPAREN params RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // params_ ::= expression COMMA params_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // params_ ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // params ::= params_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // break_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // break_statement ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // loop_statement ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparison ::= identifier LT identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparison ::= identifier LT NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparison ::= NUMBER LT identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparison ::= NUMBER LT NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparison ::= NUMBER LTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparison ::= identifier LTEQ identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparison ::= identifier LTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparison ::= NUMBER LTEQ identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // equality ::= NUMBER EQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // equality ::= BOOL EQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // equality ::= NUMBER NOTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // equality ::= BOOL NOTEQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // in ::= expression IN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // in ::= expression IN dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // in ::= expression IN sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // concat ::= SEQ COLONCOLON SEQ concat_tail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // concat ::= IDENTIFIER COLONCOLON IDENTIFIER concat_tail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // concat_tail ::= COLONCOLON SEQ concat_tail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat_tail",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concat_tail ::= COLONCOLON IDENTIFIER concat_tail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat_tail",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concat_tail ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat_tail",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // seq ::= SEQ LT data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // seq ::= SEQ LT IDENTIFIER GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // main ::= MAIN LCURL statements RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return_ ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // return_ ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // dict ::= DICT LT data_type COMMA data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operation ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operation ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operation ::= expression TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operation ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operation ::= expression MOD expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operation ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operation ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operation ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
