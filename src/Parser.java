
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\046\005\000\002\054" +
    "\003\000\002\015\014\000\002\016\004\000\002\016\002" +
    "\000\002\013\006\000\002\014\004\000\002\014\002\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\002\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\004\006" +
    "\000\002\004\006\000\002\047\003\000\002\047\002\000" +
    "\002\006\006\000\002\055\003\000\002\055\005\000\002" +
    "\052\006\000\002\033\005\000\002\034\007\000\002\034" +
    "\002\000\002\010\010\000\002\011\006\000\002\011\006" +
    "\000\002\050\004\000\002\050\002\000\002\012\006\000" +
    "\002\012\006\000\002\043\007\000\002\044\005\000\002" +
    "\044\003\000\002\044\002\000\002\017\013\000\002\017" +
    "\011\000\002\021\004\000\002\021\005\000\002\022\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\036\005\000\002\036\005\000\002\051\006\000\002\051" +
    "\006\000\002\045\007\000\002\042\004\000\002\042\005" +
    "\000\002\053\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\022\032\012\033\016\035\013\037\010\040" +
    "\022\045\015\064\014\065\uffe6\001\002\000\034\002\uffe6" +
    "\012\uffe6\032\012\033\016\034\uffe6\035\013\036\uffe6\037" +
    "\010\040\022\043\uffe6\045\015\064\014\065\uffe6\001\002" +
    "\000\036\002\uffe6\012\uffe6\032\012\033\016\034\uffe6\035" +
    "\013\036\uffe6\037\010\040\022\043\uffe6\045\015\053\232" +
    "\064\014\065\uffe6\001\002\000\004\065\224\001\002\000" +
    "\004\002\222\001\002\000\004\045\205\001\002\000\034" +
    "\002\uffe6\012\uffe6\032\012\033\016\034\uffe6\035\013\036" +
    "\uffe6\037\010\040\022\043\uffe6\045\015\064\014\065\uffe6" +
    "\001\002\000\022\020\106\021\065\022\072\026\074\027" +
    "\045\030\066\031\046\045\176\001\002\000\022\032\012" +
    "\033\016\035\013\036\uffe6\037\010\040\022\045\015\064" +
    "\014\001\002\000\036\004\171\011\047\017\050\020\076" +
    "\021\065\022\072\023\070\025\063\026\074\027\045\030" +
    "\066\031\046\045\053\071\064\001\002\000\006\005\160" +
    "\053\161\001\002\000\004\006\044\001\002\000\034\002" +
    "\uffe6\012\uffe6\032\012\033\016\034\uffe6\035\013\036\uffe6" +
    "\037\010\040\022\043\uffe6\045\015\064\014\065\uffe6\001" +
    "\002\000\034\002\uffe6\012\uffe6\032\012\033\016\034\uffe6" +
    "\035\013\036\uffe6\037\010\040\022\043\uffe6\045\015\064" +
    "\014\065\uffe6\001\002\000\034\002\uffe6\012\uffe6\032\012" +
    "\033\016\034\uffe6\035\013\036\uffe6\037\010\040\022\043" +
    "\uffe6\045\015\064\014\065\uffe6\001\002\000\006\004\037" +
    "\023\036\001\002\000\034\002\uffe6\012\uffe6\032\012\033" +
    "\016\034\uffe6\035\013\036\uffe6\037\010\040\022\043\uffe6" +
    "\045\015\064\014\065\uffe6\001\002\000\034\002\uffe6\012" +
    "\uffe6\032\012\033\016\034\uffe6\035\013\036\uffe6\037\010" +
    "\040\022\043\uffe6\045\015\064\014\065\uffe6\001\002\000" +
    "\006\002\uffff\065\uffff\001\002\000\034\002\uffe6\012\uffe6" +
    "\032\012\033\016\034\uffe6\035\013\036\uffe6\037\010\040" +
    "\022\043\uffe6\045\015\064\014\065\uffe6\001\002\000\034" +
    "\002\uffe6\012\uffe6\032\012\033\016\034\uffe6\035\013\036" +
    "\uffe6\037\010\040\022\043\uffe6\045\015\064\014\065\uffe6" +
    "\001\002\000\034\002\uffe6\012\uffe6\032\012\033\016\034" +
    "\uffe6\035\013\036\uffe6\037\010\040\022\043\uffe6\045\015" +
    "\064\014\065\uffe6\001\002\000\016\002\uffec\012\uffec\034" +
    "\uffec\036\uffec\043\uffec\065\uffec\001\002\000\016\002\uffea" +
    "\012\uffea\034\uffea\036\uffea\043\uffea\065\uffea\001\002\000" +
    "\016\002\uffee\012\uffee\034\uffee\036\uffee\043\uffee\065\uffee" +
    "\001\002\000\016\002\uffe7\012\uffe7\034\uffe7\036\uffe7\043" +
    "\uffe7\065\uffe7\001\002\000\016\002\uffef\012\uffef\034\uffef" +
    "\036\uffef\043\uffef\065\uffef\001\002\000\004\004\040\001" +
    "\002\000\034\002\uffbd\012\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\043\uffbd\045\uffbd\064" +
    "\uffbd\065\uffbd\001\002\000\034\002\uffbc\012\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\043" +
    "\uffbc\045\uffbc\064\uffbc\065\uffbc\001\002\000\016\002\uffe8" +
    "\012\uffe8\034\uffe8\036\uffe8\043\uffe8\065\uffe8\001\002\000" +
    "\016\002\ufff0\012\ufff0\034\ufff0\036\ufff0\043\ufff0\065\ufff0" +
    "\001\002\000\016\002\uffeb\012\uffeb\034\uffeb\036\uffeb\043" +
    "\uffeb\065\uffeb\001\002\000\034\011\047\017\050\020\076" +
    "\021\065\022\072\023\070\025\063\026\074\027\045\030" +
    "\066\031\046\045\053\071\064\001\002\000\050\002\ufff6" +
    "\004\ufff6\005\ufff6\010\ufff6\012\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\053\ufff6\055\ufff6\064\ufff6\065\ufff6\001\002\000" +
    "\050\002\ufff2\004\ufff2\005\ufff2\010\ufff2\012\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\053\ufff2\055\ufff2\064\ufff2\065\ufff2" +
    "\001\002\000\022\012\uffcb\020\106\021\065\022\072\026" +
    "\074\027\045\030\066\031\046\001\002\000\010\004\uffd8" +
    "\007\uffd8\010\uffd8\001\002\000\004\044\146\001\002\000" +
    "\050\002\ufff7\004\ufff7\005\ufff7\010\ufff7\012\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\053\ufff7\055\ufff7\064\ufff7\065\ufff7" +
    "\001\002\000\012\004\uffe2\006\137\007\uffe2\010\uffe2\001" +
    "\002\000\010\004\uffda\007\uffda\010\uffda\001\002\000\010" +
    "\004\uffe4\007\uffe4\010\uffe4\001\002\000\010\004\uffdc\007" +
    "\uffdc\010\uffdc\001\002\000\010\004\uffdf\007\uffdf\010\uffdf" +
    "\001\002\000\010\004\uffde\007\uffde\010\uffde\001\002\000" +
    "\010\004\uffe3\007\uffe3\010\uffe3\001\002\000\010\004\uffe0" +
    "\007\uffe0\010\uffe0\001\002\000\010\004\uffd7\007\uffd7\010" +
    "\uffd7\001\002\000\010\004\uffd6\007\uffd6\010\uffd6\001\002" +
    "\000\004\054\132\001\002\000\050\002\ufff5\004\ufff5\005" +
    "\ufff5\010\ufff5\012\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5\045\ufff5\053" +
    "\ufff5\055\ufff5\064\ufff5\065\ufff5\001\002\000\004\007\123" +
    "\001\002\000\020\004\uffd9\007\uffd9\010\uffd9\054\114\056" +
    "\116\057\113\060\115\001\002\000\050\002\ufff8\004\ufff8" +
    "\005\ufff8\010\ufff8\012\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\053\ufff8\055\ufff8\064\ufff8\065\ufff8\001\002\000\004\054" +
    "\105\001\002\000\010\004\uffdd\007\uffdd\010\uffdd\001\002" +
    "\000\050\002\ufff4\004\ufff4\005\ufff4\010\ufff4\012\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\053\ufff4\055\ufff4\064\ufff4\065" +
    "\ufff4\001\002\000\010\004\uffdb\007\uffdb\010\uffdb\001\002" +
    "\000\010\044\ufff3\057\101\060\102\001\002\000\010\004" +
    "\uffe1\007\uffe1\010\uffe1\001\002\000\010\004\uffe5\007\uffe5" +
    "\010\uffe5\001\002\000\004\020\104\001\002\000\004\020" +
    "\103\001\002\000\010\004\uffb5\007\uffb5\010\uffb5\001\002" +
    "\000\010\004\uffb7\007\uffb7\010\uffb7\001\002\000\022\020" +
    "\106\021\065\022\072\026\074\027\045\030\066\031\046" +
    "\045\107\001\002\000\046\002\ufff3\004\ufff3\005\ufff3\010" +
    "\ufff3\012\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\043\ufff3\045\ufff3\053\ufff3\055\ufff3\064" +
    "\ufff3\065\ufff3\001\002\000\004\055\112\001\002\000\004" +
    "\055\111\001\002\000\050\002\uffb2\004\uffb2\005\uffb2\010" +
    "\uffb2\012\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\043\uffb2\044\uffb2\045\uffb2\053\uffb2\055" +
    "\uffb2\064\uffb2\065\uffb2\001\002\000\050\002\uffb1\004\uffb1" +
    "\005\uffb1\010\uffb1\012\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\053\uffb1\055\uffb1\064\uffb1\065\uffb1\001\002\000\004\023" +
    "\122\001\002\000\004\023\121\001\002\000\004\023\120" +
    "\001\002\000\004\023\117\001\002\000\010\004\uffb9\007" +
    "\uffb9\010\uffb9\001\002\000\010\004\uffb6\007\uffb6\010\uffb6" +
    "\001\002\000\010\004\uffba\007\uffba\010\uffba\001\002\000" +
    "\010\004\uffb8\007\uffb8\010\uffb8\001\002\000\004\042\124" +
    "\001\002\000\024\032\012\033\016\034\uffe6\035\013\037" +
    "\010\040\022\043\uffe6\045\015\064\014\001\002\000\006" +
    "\034\126\043\127\001\002\000\034\002\uffbe\012\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\043\uffbe\045\uffbe\064\uffbe\065\uffbe\001\002\000\022\032" +
    "\012\033\016\034\uffe6\035\013\037\010\040\022\045\015" +
    "\064\014\001\002\000\004\034\131\001\002\000\034\002" +
    "\uffbf\012\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\043\uffbf\045\uffbf\064\uffbf\065\uffbf\001" +
    "\002\000\020\020\106\021\065\022\072\026\074\027\045" +
    "\030\066\031\046\001\002\000\004\010\134\001\002\000" +
    "\020\020\106\021\065\022\072\026\074\027\045\030\066" +
    "\031\046\001\002\000\004\055\136\001\002\000\050\002" +
    "\uffad\004\uffad\005\uffad\010\uffad\012\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\043\uffad\044" +
    "\uffad\045\uffad\053\uffad\055\uffad\064\uffad\065\uffad\001\002" +
    "\000\036\007\uffc0\011\047\017\050\020\076\021\065\022" +
    "\072\023\070\025\063\026\074\027\045\030\066\031\046" +
    "\045\053\071\064\001\002\000\006\007\uffc1\010\144\001" +
    "\002\000\004\007\142\001\002\000\004\004\143\001\002" +
    "\000\010\004\uffc3\007\uffc3\010\uffc3\001\002\000\036\007" +
    "\uffc0\011\047\017\050\020\076\021\065\022\072\023\070" +
    "\025\063\026\074\027\045\030\066\031\046\045\053\071" +
    "\064\001\002\000\004\007\uffc2\001\002\000\004\011\047" +
    "\001\002\000\010\004\uffb4\007\uffb4\010\uffb4\001\002\000" +
    "\010\004\uffb3\007\uffb3\010\uffb3\001\002\000\004\012\157" +
    "\001\002\000\004\005\153\001\002\000\020\020\106\021" +
    "\065\022\072\026\074\027\045\030\066\031\046\001\002" +
    "\000\004\010\155\001\002\000\022\012\uffcb\020\106\021" +
    "\065\022\072\026\074\027\045\030\066\031\046\001\002" +
    "\000\004\012\uffcc\001\002\000\010\004\uffcd\007\uffcd\010" +
    "\uffcd\001\002\000\022\020\106\021\065\022\072\026\074" +
    "\027\045\030\066\031\046\045\164\001\002\000\034\011" +
    "\047\017\050\020\076\021\065\022\072\023\070\025\063" +
    "\026\074\027\045\030\066\031\046\045\053\071\064\001" +
    "\002\000\004\004\163\001\002\000\034\002\uffce\012\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\043\uffce\045\uffce\064\uffce\065\uffce\001\002\000\040" +
    "\002\uffd2\004\166\012\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\043\uffd2\045\uffd2\053\uffd2" +
    "\064\uffd2\065\uffd2\001\002\000\040\002\uffd2\004\166\012" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\043\uffd2\045\uffd2\053\uffd2\064\uffd2\065\uffd2\001" +
    "\002\000\036\002\uffd3\012\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\045\uffd3\053" +
    "\uffd3\064\uffd3\065\uffd3\001\002\000\036\002\uffd5\012\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\043\uffd5\045\uffd5\053\uffd5\064\uffd5\065\uffd5\001\002" +
    "\000\036\002\uffd4\012\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\043\uffd4\045\uffd4\053\uffd4" +
    "\064\uffd4\065\uffd4\001\002\000\034\002\uffaf\012\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\043\uffaf\045\uffaf\064\uffaf\065\uffaf\001\002\000\004\004" +
    "\173\001\002\000\034\002\uffae\012\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\043\uffae\045" +
    "\uffae\064\uffae\065\uffae\001\002\000\004\036\175\001\002" +
    "\000\034\002\uffbb\012\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\045\uffbb\064\uffbb" +
    "\065\uffbb\001\002\000\004\045\202\001\002\000\004\045" +
    "\200\001\002\000\004\004\201\001\002\000\034\002\uffc5" +
    "\012\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\043\uffc5\045\uffc5\064\uffc5\065\uffc5\001\002" +
    "\000\004\004\203\001\002\000\034\002\uffc4\012\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\043\uffc4\045\uffc4\064\uffc4\065\uffc4\001\002\000\016\002" +
    "\uffed\012\uffed\034\uffed\036\uffed\043\uffed\065\uffed\001\002" +
    "\000\004\011\206\001\002\000\004\045\210\001\002\000" +
    "\004\012\220\001\002\000\004\005\211\001\002\000\022" +
    "\020\106\021\065\022\072\026\074\027\045\030\066\031" +
    "\046\045\212\001\002\000\006\010\215\012\uffc6\001\002" +
    "\000\006\010\215\012\uffc6\001\002\000\004\012\uffc8\001" +
    "\002\000\004\045\210\001\002\000\004\012\uffc7\001\002" +
    "\000\004\012\uffc9\001\002\000\004\004\221\001\002\000" +
    "\034\002\uffca\012\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\043\uffca\045\uffca\064\uffca\065" +
    "\uffca\001\002\000\004\002\001\001\002\000\022\002\uffe6" +
    "\032\012\033\016\035\013\037\010\040\022\045\015\064" +
    "\014\001\002\000\004\011\225\001\002\000\022\012\uffe6" +
    "\032\012\033\016\035\013\037\010\040\022\045\015\064" +
    "\014\001\002\000\004\012\227\001\002\000\004\004\230" +
    "\001\002\000\022\002\uffb0\032\uffb0\033\uffb0\035\uffb0\037" +
    "\uffb0\040\uffb0\045\uffb0\064\uffb0\001\002\000\004\002\000" +
    "\001\002\000\034\011\047\017\050\020\076\021\065\022" +
    "\072\023\070\025\063\026\074\027\045\030\066\031\046" +
    "\045\053\071\064\001\002\000\016\002\ufff1\012\ufff1\034" +
    "\ufff1\036\ufff1\043\ufff1\065\ufff1\001\002\000\004\004\240" +
    "\001\002\000\006\004\uffd0\010\236\001\002\000\034\011" +
    "\047\017\050\020\076\021\065\022\072\023\070\025\063" +
    "\026\074\027\045\030\066\031\046\045\053\071\064\001" +
    "\002\000\004\004\uffcf\001\002\000\034\002\uffd1\012\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\043\uffd1\045\uffd1\064\uffd1\065\uffd1\001\002\000\016" +
    "\002\uffe9\012\uffe9\034\uffe9\036\uffe9\043\uffe9\065\uffe9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\036\002\024\004\004\006\017\007\025\010" +
    "\003\012\020\017\010\020\027\021\022\022\016\042\026" +
    "\046\006\052\023\054\005\001\001\000\032\002\240\004" +
    "\004\006\017\007\025\010\003\012\020\017\010\020\027" +
    "\021\022\022\016\042\026\052\023\001\001\000\032\002" +
    "\232\004\004\006\017\007\025\010\003\012\020\017\010" +
    "\020\027\021\022\022\016\042\026\052\023\001\001\000" +
    "\004\045\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\203\004\004\006\017\007\025\010\003\012" +
    "\020\017\010\020\027\021\022\022\016\042\026\052\023" +
    "\001\001\000\010\041\176\051\070\053\051\001\001\000" +
    "\032\002\173\004\004\006\017\007\025\010\003\012\020" +
    "\017\010\020\027\021\022\022\016\042\026\052\023\001" +
    "\001\000\040\005\171\023\076\024\057\025\072\026\056" +
    "\030\060\031\053\033\061\036\055\037\077\040\074\041" +
    "\050\043\054\051\070\053\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\042\004\004\006\017\007" +
    "\025\010\003\012\020\017\010\020\027\021\022\022\016" +
    "\042\026\052\023\001\001\000\032\002\041\004\004\006" +
    "\017\007\025\010\003\012\020\017\010\020\027\021\022" +
    "\022\016\042\026\052\023\001\001\000\032\002\040\004" +
    "\004\006\017\007\025\010\003\012\020\017\010\020\027" +
    "\021\022\022\016\042\026\052\023\001\001\000\002\001" +
    "\001\000\032\002\034\004\004\006\017\007\025\010\003" +
    "\012\020\017\010\020\027\021\022\022\016\042\026\052" +
    "\023\001\001\000\032\002\033\004\004\006\017\007\025" +
    "\010\003\012\020\017\010\020\027\021\022\022\016\042" +
    "\026\052\023\001\001\000\002\001\001\000\032\002\032" +
    "\004\004\006\017\007\025\010\003\012\020\017\010\020" +
    "\027\021\022\022\016\042\026\052\023\001\001\000\032" +
    "\002\031\004\004\006\017\007\025\010\003\012\020\017" +
    "\010\020\027\021\022\022\016\042\026\052\023\001\001" +
    "\000\032\002\030\004\004\006\017\007\025\010\003\012" +
    "\020\017\010\020\027\021\022\022\016\042\026\052\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\066\023\076" +
    "\024\057\025\072\026\056\030\060\031\053\033\061\036" +
    "\055\037\077\040\074\041\050\043\054\051\070\053\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\150\041\151\051\070\053\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\107\051" +
    "\070\053\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\124" +
    "\004\004\006\017\007\025\010\003\012\020\017\010\020" +
    "\027\021\022\022\016\042\026\052\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\127\004\004\006" +
    "\017\007\025\010\003\012\020\017\010\020\027\021\022" +
    "\022\016\042\026\052\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\132\051\070\053\051\001\001" +
    "\000\002\001\001\000\010\041\134\051\070\053\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\137" +
    "\023\076\024\057\025\072\026\056\030\060\031\053\033" +
    "\061\036\055\037\077\040\074\041\050\043\054\044\140" +
    "\051\070\053\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\137" +
    "\023\076\024\057\025\072\026\056\030\060\031\053\033" +
    "\061\036\055\037\077\040\074\041\050\043\054\044\144" +
    "\051\070\053\051\001\001\000\002\001\001\000\006\026" +
    "\146\033\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\153\051" +
    "\070\053\051\001\001\000\002\001\001\000\012\034\155" +
    "\041\151\051\070\053\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\164\051\070\053\051\001\001" +
    "\000\040\005\161\023\076\024\057\025\072\026\056\030" +
    "\060\031\053\033\061\036\055\037\077\040\074\041\050" +
    "\043\054\051\070\053\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\167\001\001\000\004\047\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\212\051\070\053\051\001\001\000" +
    "\004\050\216\001\001\000\004\050\213\001\001\000\002" +
    "\001\001\000\004\011\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\024\004\004\006\017\007\025\010" +
    "\003\012\020\017\010\020\027\021\022\022\016\042\026" +
    "\052\023\054\230\001\001\000\002\001\001\000\032\002" +
    "\225\004\004\006\017\007\025\010\003\012\020\017\010" +
    "\020\027\021\022\022\016\042\026\052\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\234\023\076\024\057\025\072\026" +
    "\056\030\060\031\053\033\061\036\055\037\077\040\074" +
    "\041\050\043\054\051\070\053\051\055\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\234\023\076\024\057\025\072\026\056\030\060\031" +
    "\053\033\061\036\055\037\077\040\074\041\050\043\054" +
    "\051\070\053\051\055\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_block main program_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_block ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL statements RCURL returnType SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // returnType ::= COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // returnType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameter ::= IDENTIFIER COLON data_type parameterTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameterTail ::= COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameterTail ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= declaration statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= declaration_assignment statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= break_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= dictionary_binding statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= if_else_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= loop_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements ::= return_ statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements ::= typeDefinition statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= alias statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= sequenceSlicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // data ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // data ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // data ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // data ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= IDENTIFIER COLON data_type dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= IDENTIFIER COLON IDENTIFIER dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration_assignment ::= declaration COLONEQ all_data SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_data ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_data ::= expression COMMA all_data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= IDENTIFIER COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dictionary ::= LCURL dict_element RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dict_element ::= data_type COLON data_type COMMA dict_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dict_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefinition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // objectArray ::= IDENTIFIER COLON IDENTIFIER arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // objectArray ::= IDENTIFIER COLON data_type arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arr ::= COMMA objectArray 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // alias ::= ALIAS data_type IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // alias ::= ALIAS IDENTIFIER IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_call ::= IDENTIFIER LPAREN params RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // params ::= expression COMMA params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // params ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // break_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // break_statement ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // loop_statement ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparison ::= NUMBER LT NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comparison ::= NUMBER LTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // equality ::= NUMBER EQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // equality ::= BOOL EQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // equality ::= NUMBER NOTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // equality ::= BOOL NOTEQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // in ::= data_type IN sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // in ::= data_type IN dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seq ::= SEQ LT data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // seq ::= SEQ LT IDENTIFIER GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // main ::= MAIN LCURL statements RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // return_ ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // return_ ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dict ::= DICT LT data_type COMMA data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
