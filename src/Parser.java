
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\046\005\000\002\054" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\004\006\000\002\004\006\000\002\047\003\000\002\047" +
    "\002\000\002\006\006\000\002\055\003\000\002\055\005" +
    "\000\002\052\006\000\002\033\005\000\002\034\007\000" +
    "\002\034\002\000\002\010\010\000\002\011\006\000\002" +
    "\011\006\000\002\050\004\000\002\050\002\000\002\012" +
    "\006\000\002\012\006\000\002\043\007\000\002\044\005" +
    "\000\002\044\003\000\002\044\002\000\002\017\013\000" +
    "\002\017\011\000\002\021\004\000\002\021\005\000\002" +
    "\022\005\000\002\023\005\000\002\023\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\036\005\000\002\036\005\000\002\051\006\000" +
    "\002\051\006\000\002\045\007\000\002\042\004\000\002" +
    "\042\005\000\002\053\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\022\032\012\033\016\035\013\037\010\040" +
    "\023\045\015\064\014\065\uffec\001\002\000\034\002\uffec" +
    "\012\uffec\032\012\033\016\034\uffec\035\013\036\uffec\037" +
    "\010\040\023\043\uffec\045\015\064\014\065\uffec\001\002" +
    "\000\036\002\uffec\012\uffec\032\012\033\016\034\uffec\035" +
    "\013\036\uffec\037\010\040\023\043\uffec\045\015\053\232" +
    "\064\014\065\uffec\001\002\000\004\065\224\001\002\000" +
    "\004\002\222\001\002\000\004\045\205\001\002\000\034" +
    "\002\uffec\012\uffec\032\012\033\016\034\uffec\035\013\036" +
    "\uffec\037\010\040\023\043\uffec\045\015\064\014\065\uffec" +
    "\001\002\000\022\020\106\021\065\022\072\026\074\027" +
    "\045\030\066\031\046\045\176\001\002\000\022\032\012" +
    "\033\016\035\013\036\uffec\037\010\040\023\045\015\064" +
    "\014\001\002\000\036\004\171\011\050\017\047\020\076" +
    "\021\065\022\072\023\070\025\063\026\074\027\045\030" +
    "\066\031\046\045\054\071\064\001\002\000\006\005\160" +
    "\053\161\001\002\000\004\006\044\001\002\000\034\002" +
    "\uffec\012\uffec\032\012\033\016\034\uffec\035\013\036\uffec" +
    "\037\010\040\023\043\uffec\045\015\064\014\065\uffec\001" +
    "\002\000\034\002\uffec\012\uffec\032\012\033\016\034\uffec" +
    "\035\013\036\uffec\037\010\040\023\043\uffec\045\015\064" +
    "\014\065\uffec\001\002\000\034\002\uffec\012\uffec\032\012" +
    "\033\016\034\uffec\035\013\036\uffec\037\010\040\023\043" +
    "\uffec\045\015\064\014\065\uffec\001\002\000\034\002\uffec" +
    "\012\uffec\032\012\033\016\034\uffec\035\013\036\uffec\037" +
    "\010\040\023\043\uffec\045\015\064\014\065\uffec\001\002" +
    "\000\006\004\036\023\035\001\002\000\034\002\uffec\012" +
    "\uffec\032\012\033\016\034\uffec\035\013\036\uffec\037\010" +
    "\040\023\043\uffec\045\015\064\014\065\uffec\001\002\000" +
    "\006\002\uffff\065\uffff\001\002\000\034\002\uffec\012\uffec" +
    "\032\012\033\016\034\uffec\035\013\036\uffec\037\010\040" +
    "\023\043\uffec\045\015\064\014\065\uffec\001\002\000\034" +
    "\002\uffec\012\uffec\032\012\033\016\034\uffec\035\013\036" +
    "\uffec\037\010\040\023\043\uffec\045\015\064\014\065\uffec" +
    "\001\002\000\034\002\uffec\012\uffec\032\012\033\016\034" +
    "\uffec\035\013\036\uffec\037\010\040\023\043\uffec\045\015" +
    "\064\014\065\uffec\001\002\000\016\002\ufff2\012\ufff2\034" +
    "\ufff2\036\ufff2\043\ufff2\065\ufff2\001\002\000\016\002\ufff0" +
    "\012\ufff0\034\ufff0\036\ufff0\043\ufff0\065\ufff0\001\002\000" +
    "\016\002\ufff4\012\ufff4\034\ufff4\036\ufff4\043\ufff4\065\ufff4" +
    "\001\002\000\016\002\uffed\012\uffed\034\uffed\036\uffed\043" +
    "\uffed\065\uffed\001\002\000\004\004\037\001\002\000\034" +
    "\002\uffc3\012\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\043\uffc3\045\uffc3\064\uffc3\065\uffc3" +
    "\001\002\000\034\002\uffc2\012\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\043\uffc2\045\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\016\002\ufff5\012\ufff5\034" +
    "\ufff5\036\ufff5\043\ufff5\065\ufff5\001\002\000\016\002\uffee" +
    "\012\uffee\034\uffee\036\uffee\043\uffee\065\uffee\001\002\000" +
    "\016\002\ufff6\012\ufff6\034\ufff6\036\ufff6\043\ufff6\065\ufff6" +
    "\001\002\000\016\002\ufff1\012\ufff1\034\ufff1\036\ufff1\043" +
    "\ufff1\065\ufff1\001\002\000\034\011\050\017\047\020\076" +
    "\021\065\022\072\023\070\025\063\026\074\027\045\030" +
    "\066\031\046\045\054\071\064\001\002\000\050\002\ufffc" +
    "\004\ufffc\005\ufffc\010\ufffc\012\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\053\ufffc\055\ufffc\064\ufffc\065\ufffc\001\002\000" +
    "\050\002\ufff8\004\ufff8\005\ufff8\010\ufff8\012\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\053\ufff8\055\ufff8\064\ufff8\065\ufff8" +
    "\001\002\000\010\004\uffde\007\uffde\010\uffde\001\002\000" +
    "\022\012\uffd1\020\106\021\065\022\072\026\074\027\045" +
    "\030\066\031\046\001\002\000\050\002\ufffd\004\ufffd\005" +
    "\ufffd\010\ufffd\012\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\043\ufffd\044\ufffd\045\ufffd\053" +
    "\ufffd\055\ufffd\064\ufffd\065\ufffd\001\002\000\004\044\146" +
    "\001\002\000\010\004\uffe0\007\uffe0\010\uffe0\001\002\000" +
    "\012\004\uffe8\006\137\007\uffe8\010\uffe8\001\002\000\010" +
    "\004\uffea\007\uffea\010\uffea\001\002\000\010\004\uffe2\007" +
    "\uffe2\010\uffe2\001\002\000\010\004\uffe5\007\uffe5\010\uffe5" +
    "\001\002\000\010\004\uffe4\007\uffe4\010\uffe4\001\002\000" +
    "\010\004\uffe6\007\uffe6\010\uffe6\001\002\000\010\004\uffe9" +
    "\007\uffe9\010\uffe9\001\002\000\010\004\uffdd\007\uffdd\010" +
    "\uffdd\001\002\000\010\004\uffdc\007\uffdc\010\uffdc\001\002" +
    "\000\004\054\132\001\002\000\050\002\ufffb\004\ufffb\005" +
    "\ufffb\010\ufffb\012\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\043\ufffb\044\ufffb\045\ufffb\053" +
    "\ufffb\055\ufffb\064\ufffb\065\ufffb\001\002\000\004\007\123" +
    "\001\002\000\020\004\uffdf\007\uffdf\010\uffdf\054\114\056" +
    "\116\057\113\060\115\001\002\000\050\002\ufffe\004\ufffe" +
    "\005\ufffe\010\ufffe\012\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\053\ufffe\055\ufffe\064\ufffe\065\ufffe\001\002\000\004\054" +
    "\105\001\002\000\010\004\uffe3\007\uffe3\010\uffe3\001\002" +
    "\000\050\002\ufffa\004\ufffa\005\ufffa\010\ufffa\012\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\053\ufffa\055\ufffa\064\ufffa\065" +
    "\ufffa\001\002\000\010\004\uffe1\007\uffe1\010\uffe1\001\002" +
    "\000\010\044\ufff9\057\101\060\102\001\002\000\010\004" +
    "\uffeb\007\uffeb\010\uffeb\001\002\000\010\004\uffe7\007\uffe7" +
    "\010\uffe7\001\002\000\004\020\104\001\002\000\004\020" +
    "\103\001\002\000\010\004\uffbb\007\uffbb\010\uffbb\001\002" +
    "\000\010\004\uffbd\007\uffbd\010\uffbd\001\002\000\022\020" +
    "\106\021\065\022\072\026\074\027\045\030\066\031\046" +
    "\045\107\001\002\000\046\002\ufff9\004\ufff9\005\ufff9\010" +
    "\ufff9\012\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\043\ufff9\045\ufff9\053\ufff9\055\ufff9\064" +
    "\ufff9\065\ufff9\001\002\000\004\055\112\001\002\000\004" +
    "\055\111\001\002\000\050\002\uffb8\004\uffb8\005\uffb8\010" +
    "\uffb8\012\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\043\uffb8\044\uffb8\045\uffb8\053\uffb8\055" +
    "\uffb8\064\uffb8\065\uffb8\001\002\000\050\002\uffb7\004\uffb7" +
    "\005\uffb7\010\uffb7\012\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\053\uffb7\055\uffb7\064\uffb7\065\uffb7\001\002\000\004\023" +
    "\122\001\002\000\004\023\121\001\002\000\004\023\120" +
    "\001\002\000\004\023\117\001\002\000\010\004\uffbf\007" +
    "\uffbf\010\uffbf\001\002\000\010\004\uffbc\007\uffbc\010\uffbc" +
    "\001\002\000\010\004\uffc0\007\uffc0\010\uffc0\001\002\000" +
    "\010\004\uffbe\007\uffbe\010\uffbe\001\002\000\004\042\124" +
    "\001\002\000\024\032\012\033\016\034\uffec\035\013\037" +
    "\010\040\023\043\uffec\045\015\064\014\001\002\000\006" +
    "\034\126\043\127\001\002\000\034\002\uffc4\012\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\043\uffc4\045\uffc4\064\uffc4\065\uffc4\001\002\000\022\032" +
    "\012\033\016\034\uffec\035\013\037\010\040\023\045\015" +
    "\064\014\001\002\000\004\034\131\001\002\000\034\002" +
    "\uffc5\012\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\043\uffc5\045\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\020\020\106\021\065\022\072\026\074\027\045" +
    "\030\066\031\046\001\002\000\004\010\134\001\002\000" +
    "\020\020\106\021\065\022\072\026\074\027\045\030\066" +
    "\031\046\001\002\000\004\055\136\001\002\000\050\002" +
    "\uffb3\004\uffb3\005\uffb3\010\uffb3\012\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\053\uffb3\055\uffb3\064\uffb3\065\uffb3\001\002" +
    "\000\036\007\uffc6\011\050\017\047\020\076\021\065\022" +
    "\072\023\070\025\063\026\074\027\045\030\066\031\046" +
    "\045\054\071\064\001\002\000\006\007\uffc7\010\144\001" +
    "\002\000\004\007\142\001\002\000\004\004\143\001\002" +
    "\000\010\004\uffc9\007\uffc9\010\uffc9\001\002\000\036\007" +
    "\uffc6\011\050\017\047\020\076\021\065\022\072\023\070" +
    "\025\063\026\074\027\045\030\066\031\046\045\054\071" +
    "\064\001\002\000\004\007\uffc8\001\002\000\004\011\050" +
    "\001\002\000\010\004\uffba\007\uffba\010\uffba\001\002\000" +
    "\010\004\uffb9\007\uffb9\010\uffb9\001\002\000\004\012\157" +
    "\001\002\000\004\005\153\001\002\000\020\020\106\021" +
    "\065\022\072\026\074\027\045\030\066\031\046\001\002" +
    "\000\004\010\155\001\002\000\022\012\uffd1\020\106\021" +
    "\065\022\072\026\074\027\045\030\066\031\046\001\002" +
    "\000\004\012\uffd2\001\002\000\010\004\uffd3\007\uffd3\010" +
    "\uffd3\001\002\000\022\020\106\021\065\022\072\026\074" +
    "\027\045\030\066\031\046\045\164\001\002\000\034\011" +
    "\050\017\047\020\076\021\065\022\072\023\070\025\063" +
    "\026\074\027\045\030\066\031\046\045\054\071\064\001" +
    "\002\000\004\004\163\001\002\000\034\002\uffd4\012\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\043\uffd4\045\uffd4\064\uffd4\065\uffd4\001\002\000\040" +
    "\002\uffd8\004\166\012\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\043\uffd8\045\uffd8\053\uffd8" +
    "\064\uffd8\065\uffd8\001\002\000\040\002\uffd8\004\166\012" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\043\uffd8\045\uffd8\053\uffd8\064\uffd8\065\uffd8\001" +
    "\002\000\036\002\uffd9\012\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\043\uffd9\045\uffd9\053" +
    "\uffd9\064\uffd9\065\uffd9\001\002\000\036\002\uffdb\012\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\043\uffdb\045\uffdb\053\uffdb\064\uffdb\065\uffdb\001\002" +
    "\000\036\002\uffda\012\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\043\uffda\045\uffda\053\uffda" +
    "\064\uffda\065\uffda\001\002\000\034\002\uffb5\012\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\043\uffb5\045\uffb5\064\uffb5\065\uffb5\001\002\000\004\004" +
    "\173\001\002\000\034\002\uffb4\012\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\043\uffb4\045" +
    "\uffb4\064\uffb4\065\uffb4\001\002\000\004\036\175\001\002" +
    "\000\034\002\uffc1\012\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\043\uffc1\045\uffc1\064\uffc1" +
    "\065\uffc1\001\002\000\004\045\202\001\002\000\004\045" +
    "\200\001\002\000\004\004\201\001\002\000\034\002\uffcb" +
    "\012\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\043\uffcb\045\uffcb\064\uffcb\065\uffcb\001\002" +
    "\000\004\004\203\001\002\000\034\002\uffca\012\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\043\uffca\045\uffca\064\uffca\065\uffca\001\002\000\016\002" +
    "\ufff3\012\ufff3\034\ufff3\036\ufff3\043\ufff3\065\ufff3\001\002" +
    "\000\004\011\206\001\002\000\004\045\210\001\002\000" +
    "\004\012\220\001\002\000\004\005\211\001\002\000\022" +
    "\020\106\021\065\022\072\026\074\027\045\030\066\031" +
    "\046\045\212\001\002\000\006\010\215\012\uffcc\001\002" +
    "\000\006\010\215\012\uffcc\001\002\000\004\012\uffce\001" +
    "\002\000\004\045\210\001\002\000\004\012\uffcd\001\002" +
    "\000\004\012\uffcf\001\002\000\004\004\221\001\002\000" +
    "\034\002\uffd0\012\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\043\uffd0\045\uffd0\064\uffd0\065" +
    "\uffd0\001\002\000\004\002\001\001\002\000\022\002\uffec" +
    "\032\012\033\016\035\013\037\010\040\023\045\015\064" +
    "\014\001\002\000\004\011\225\001\002\000\022\012\uffec" +
    "\032\012\033\016\035\013\037\010\040\023\045\015\064" +
    "\014\001\002\000\004\012\227\001\002\000\004\004\230" +
    "\001\002\000\022\002\uffb6\032\uffb6\033\uffb6\035\uffb6\037" +
    "\uffb6\040\uffb6\045\uffb6\064\uffb6\001\002\000\004\002\000" +
    "\001\002\000\034\011\050\017\047\020\076\021\065\022" +
    "\072\023\070\025\063\026\074\027\045\030\066\031\046" +
    "\045\054\071\064\001\002\000\016\002\ufff7\012\ufff7\034" +
    "\ufff7\036\ufff7\043\ufff7\065\ufff7\001\002\000\004\004\240" +
    "\001\002\000\006\004\uffd6\010\236\001\002\000\034\011" +
    "\050\017\047\020\076\021\065\022\072\023\070\025\063" +
    "\026\074\027\045\030\066\031\046\045\054\071\064\001" +
    "\002\000\004\004\uffd5\001\002\000\034\002\uffd7\012\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\043\uffd7\045\uffd7\064\uffd7\065\uffd7\001\002\000\016" +
    "\002\uffef\012\uffef\034\uffef\036\uffef\043\uffef\065\uffef\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\036\002\024\004\004\006\017\007\025\010" +
    "\003\012\020\017\010\020\027\021\021\022\016\042\026" +
    "\046\006\052\023\054\005\001\001\000\032\002\240\004" +
    "\004\006\017\007\025\010\003\012\020\017\010\020\027" +
    "\021\021\022\016\042\026\052\023\001\001\000\032\002" +
    "\232\004\004\006\017\007\025\010\003\012\020\017\010" +
    "\020\027\021\021\022\016\042\026\052\023\001\001\000" +
    "\004\045\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\203\004\004\006\017\007\025\010\003\012" +
    "\020\017\010\020\027\021\021\022\016\042\026\052\023" +
    "\001\001\000\010\041\176\051\070\053\050\001\001\000" +
    "\032\002\173\004\004\006\017\007\025\010\003\012\020" +
    "\017\010\020\027\021\021\022\016\042\026\052\023\001" +
    "\001\000\040\005\171\023\077\024\057\025\072\026\056" +
    "\030\061\031\052\033\060\036\055\037\076\040\074\041" +
    "\051\043\054\051\070\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\042\004\004\006\017\007" +
    "\025\010\003\012\020\017\010\020\027\021\021\022\016" +
    "\042\026\052\023\001\001\000\032\002\041\004\004\006" +
    "\017\007\025\010\003\012\020\017\010\020\027\021\021" +
    "\022\016\042\026\052\023\001\001\000\032\002\040\004" +
    "\004\006\017\007\025\010\003\012\020\017\010\020\027" +
    "\021\021\022\016\042\026\052\023\001\001\000\032\002" +
    "\037\004\004\006\017\007\025\010\003\012\020\017\010" +
    "\020\027\021\021\022\016\042\026\052\023\001\001\000" +
    "\002\001\001\000\032\002\033\004\004\006\017\007\025" +
    "\010\003\012\020\017\010\020\027\021\021\022\016\042" +
    "\026\052\023\001\001\000\002\001\001\000\032\002\032" +
    "\004\004\006\017\007\025\010\003\012\020\017\010\020" +
    "\027\021\021\022\016\042\026\052\023\001\001\000\032" +
    "\002\031\004\004\006\017\007\025\010\003\012\020\017" +
    "\010\020\027\021\021\022\016\042\026\052\023\001\001" +
    "\000\032\002\030\004\004\006\017\007\025\010\003\012" +
    "\020\017\010\020\027\021\021\022\016\042\026\052\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\066\023\077" +
    "\024\057\025\072\026\056\030\061\031\052\033\060\036" +
    "\055\037\076\040\074\041\051\043\054\051\070\053\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\150\041\151\051\070\053\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\107\051" +
    "\070\053\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\124" +
    "\004\004\006\017\007\025\010\003\012\020\017\010\020" +
    "\027\021\021\022\016\042\026\052\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\127\004\004\006" +
    "\017\007\025\010\003\012\020\017\010\020\027\021\021" +
    "\022\016\042\026\052\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\132\051\070\053\050\001\001" +
    "\000\002\001\001\000\010\041\134\051\070\053\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\137" +
    "\023\077\024\057\025\072\026\056\030\061\031\052\033" +
    "\060\036\055\037\076\040\074\041\051\043\054\044\140" +
    "\051\070\053\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\137" +
    "\023\077\024\057\025\072\026\056\030\061\031\052\033" +
    "\060\036\055\037\076\040\074\041\051\043\054\044\144" +
    "\051\070\053\050\001\001\000\002\001\001\000\006\026" +
    "\146\033\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\153\051" +
    "\070\053\050\001\001\000\002\001\001\000\012\034\155" +
    "\041\151\051\070\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\164\051\070\053\050\001\001" +
    "\000\040\005\161\023\077\024\057\025\072\026\056\030" +
    "\061\031\052\033\060\036\055\037\076\040\074\041\051" +
    "\043\054\051\070\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\167\001\001\000\004\047\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\212\051\070\053\050\001\001\000" +
    "\004\050\216\001\001\000\004\050\213\001\001\000\002" +
    "\001\001\000\004\011\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\024\004\004\006\017\007\025\010" +
    "\003\012\020\017\010\020\027\021\021\022\016\042\026" +
    "\052\023\054\230\001\001\000\002\001\001\000\032\002" +
    "\225\004\004\006\017\007\025\010\003\012\020\017\010" +
    "\020\027\021\021\022\016\042\026\052\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\234\023\077\024\057\025\072\026" +
    "\056\030\061\031\052\033\060\036\055\037\076\040\074" +
    "\041\051\043\054\051\070\053\050\055\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\234\023\077\024\057\025\072\026\056\030\061\031" +
    "\052\033\060\036\055\037\076\040\074\041\051\043\054" +
    "\051\070\053\050\055\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_block main program_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_block ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // data_type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // data_type ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements ::= declaration statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= declaration_assignment statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= break_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= dictionary_binding statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= if_else_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= loop_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= return_ statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= typeDefinition statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= alias statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= sequenceSlicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration ::= IDENTIFIER COLON data_type dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration ::= IDENTIFIER COLON IDENTIFIER dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration_assignment ::= declaration COLONEQ all_data SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // all_data ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // all_data ::= expression COMMA all_data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_data",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignment ::= IDENTIFIER COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dictionary ::= LCURL dict_element RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dict_element ::= data_type COLON data_type COMMA dict_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dict_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefinition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // objectArray ::= IDENTIFIER COLON IDENTIFIER arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // objectArray ::= IDENTIFIER COLON data_type arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arr ::= COMMA objectArray 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // alias ::= ALIAS data_type IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // alias ::= ALIAS IDENTIFIER IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_call ::= IDENTIFIER LPAREN params RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // params ::= expression COMMA params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // params ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // break_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // break_statement ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loop_statement ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparison ::= NUMBER LT NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comparison ::= NUMBER LTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // equality ::= NUMBER EQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // equality ::= BOOL EQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // equality ::= NUMBER NOTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // equality ::= BOOL NOTEQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // in ::= data_type IN sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // in ::= data_type IN dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seq ::= SEQ LT data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // seq ::= SEQ LT IDENTIFIER GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // main ::= MAIN LCURL statements RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return_ ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // return_ ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dict ::= DICT LT data_type COMMA data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
