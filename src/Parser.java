
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\015\014" +
    "\000\002\016\004\000\002\016\002\000\002\013\006\000" +
    "\002\014\004\000\002\014\002\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\004\006" +
    "\000\002\047\003\000\002\047\002\000\002\006\006\000" +
    "\002\052\006\000\002\052\006\000\002\033\005\000\002" +
    "\034\007\000\002\034\002\000\002\010\010\000\002\011" +
    "\006\000\002\011\006\000\002\050\004\000\002\050\002" +
    "\000\002\012\006\000\002\012\006\000\002\043\007\000" +
    "\002\044\005\000\002\044\003\000\002\044\002\000\002" +
    "\017\013\000\002\017\011\000\002\021\004\000\002\021" +
    "\005\000\002\022\005\000\002\023\005\000\002\023\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\036" +
    "\005\000\002\036\005\000\002\051\006\000\002\051\006" +
    "\000\002\045\007\000\002\042\004\000\002\042\005\000" +
    "\002\053\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\056\002\uffe4\011\016\015\015\017\014\020" +
    "\021\021\050\022\004\023\043\025\032\026\024\027\013" +
    "\030\052\031\010\032\055\033\030\035\026\037\020\040" +
    "\045\041\046\045\065\064\034\065\027\001\002\000\004" +
    "\054\260\001\002\000\004\002\000\001\002\000\032\002" +
    "\uffe4\012\uffe4\032\055\033\030\034\uffe4\035\026\036\uffe4" +
    "\037\020\040\045\043\uffe4\045\121\064\034\001\002\000" +
    "\012\002\uffdd\004\uffdd\007\uffdd\010\uffdd\001\002\000\050" +
    "\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\012\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\053\ufff0\055\ufff0\064\ufff0\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffe\001\002" +
    "\000\050\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\043\ufff4\044\ufff4\045\ufff4\053\ufff4\055\ufff4\064" +
    "\ufff4\001\002\000\034\011\uffd7\015\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\045\uffd7\001\002\000\006\015\015\025\114" +
    "\001\002\000\022\012\uffcd\020\104\021\050\022\004\026" +
    "\024\027\013\030\052\031\010\001\002\000\032\002\uffe4" +
    "\012\uffe4\032\055\033\030\034\uffe4\035\026\036\uffe4\037" +
    "\020\040\045\043\uffe4\045\121\064\034\001\002\000\004" +
    "\045\231\001\002\000\010\044\ufff1\057\225\060\226\001" +
    "\002\000\032\002\uffe4\012\uffe4\032\055\033\030\034\uffe4" +
    "\035\026\036\uffe4\037\020\040\045\043\uffe4\045\121\064" +
    "\034\001\002\000\032\002\uffe4\012\uffe4\032\055\033\030" +
    "\034\uffe4\035\026\036\uffe4\037\020\040\045\043\uffe4\045" +
    "\121\064\034\001\002\000\050\002\ufff2\004\ufff2\005\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\053\ufff2\055\ufff2\064\ufff2\001\002\000\032\002\uffe4\012" +
    "\uffe4\032\055\033\030\034\uffe4\035\026\036\uffe4\037\020" +
    "\040\045\043\uffe4\045\121\064\034\001\002\000\022\032" +
    "\055\033\030\035\026\036\uffe4\037\020\040\045\045\121" +
    "\064\034\001\002\000\004\011\214\001\002\000\004\006" +
    "\203\001\002\000\004\002\ufffd\001\002\000\052\002\uffb2" +
    "\004\uffb2\007\uffb2\010\uffb2\011\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\045\uffd6\061\uffb2\062\uffb2\063\uffb2\001" +
    "\002\000\032\002\uffe4\012\uffe4\032\055\033\030\034\uffe4" +
    "\035\026\036\uffe4\037\020\040\045\043\uffe4\045\121\064" +
    "\034\001\002\000\036\004\177\011\016\015\015\017\014" +
    "\020\021\021\050\022\004\023\043\025\032\026\024\027" +
    "\013\030\052\031\010\045\075\001\002\000\032\002\uffe4" +
    "\012\uffe4\032\055\033\030\034\uffe4\035\026\036\uffe4\037" +
    "\020\040\045\043\uffe4\045\121\064\034\001\002\000\012" +
    "\002\uffd9\004\uffd9\007\uffd9\010\uffd9\001\002\000\004\044" +
    "\173\001\002\000\050\002\ufff6\004\ufff6\005\ufff6\007\ufff6" +
    "\010\ufff6\012\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\043\ufff6\044\ufff6\045\ufff6\053\ufff6" +
    "\055\ufff6\064\ufff6\001\002\000\032\002\uffe4\012\uffe4\032" +
    "\055\033\030\034\uffe4\035\026\036\uffe4\037\020\040\045" +
    "\043\uffe4\045\121\064\034\001\002\000\012\002\uffdb\004" +
    "\uffdb\007\uffdb\010\uffdb\001\002\000\044\011\uffd8\015\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\045\uffd8\054\162\056\165" +
    "\057\163\060\164\001\002\000\032\002\uffe4\012\uffe4\032" +
    "\055\033\030\034\uffe4\035\026\036\uffe4\037\020\040\045" +
    "\043\uffe4\045\121\064\034\001\002\000\006\004\157\023" +
    "\156\001\002\000\004\045\135\001\002\000\012\002\uffe1" +
    "\004\uffe1\007\uffe1\010\uffe1\001\002\000\050\002\ufff5\004" +
    "\ufff5\005\ufff5\007\ufff5\010\ufff5\012\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\053\ufff5\055\ufff5\064\ufff5\001\002\000\032" +
    "\002\uffe4\012\uffe4\032\055\033\030\034\uffe4\035\026\036" +
    "\uffe4\037\020\040\045\043\uffe4\045\121\064\034\001\002" +
    "\000\050\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\012" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\043\ufff3\044\ufff3\045\ufff3\053\ufff3\055\ufff3\064" +
    "\ufff3\001\002\000\012\002\uffdf\004\uffdf\007\uffdf\010\uffdf" +
    "\001\002\000\012\002\uffe2\004\uffe2\007\uffe2\010\uffe2\001" +
    "\002\000\022\020\104\021\050\022\004\026\024\027\013" +
    "\030\052\031\010\045\126\001\002\000\012\002\uffde\004" +
    "\uffde\007\uffde\010\uffde\001\002\000\034\002\uffe4\012\uffe4" +
    "\032\055\033\030\034\uffe4\035\026\036\uffe4\037\020\040" +
    "\045\043\uffe4\045\121\053\122\064\034\001\002\000\012" +
    "\002\uffe0\004\uffe0\007\uffe0\010\uffe0\001\002\000\034\011" +
    "\016\015\015\017\014\020\021\021\050\022\004\023\043" +
    "\025\032\026\024\027\013\030\052\031\010\045\075\001" +
    "\002\000\004\002\117\001\002\000\020\002\uffdc\004\uffdc" +
    "\007\uffdc\010\uffdc\061\110\062\112\063\111\001\002\000" +
    "\012\002\uffda\004\uffda\007\uffda\010\uffda\001\002\000\010" +
    "\005\066\006\067\053\070\001\002\000\020\020\104\021" +
    "\050\022\004\026\024\027\013\030\052\031\010\001\002" +
    "\000\036\007\uffc2\011\016\015\015\017\014\020\021\021" +
    "\050\022\004\023\043\025\032\026\024\027\013\030\052" +
    "\031\010\045\075\001\002\000\034\011\016\015\015\017" +
    "\014\020\021\021\050\022\004\023\043\025\032\026\024" +
    "\027\013\030\052\031\010\045\071\001\002\000\006\004" +
    "\074\006\067\001\002\000\004\004\073\001\002\000\032" +
    "\002\uffd0\012\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\043\uffd0\045\uffd0\064\uffd0\001\002" +
    "\000\032\002\uffd1\012\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1\045\uffd1\064\uffd1" +
    "\001\002\000\004\006\067\001\002\000\006\007\uffc3\010" +
    "\102\001\002\000\004\007\100\001\002\000\004\004\101" +
    "\001\002\000\012\002\uffc5\004\uffc5\007\uffc5\010\uffc5\001" +
    "\002\000\036\007\uffc2\011\016\015\015\017\014\020\021" +
    "\021\050\022\004\023\043\025\032\026\024\027\013\030" +
    "\052\031\010\045\075\001\002\000\004\007\uffc4\001\002" +
    "\000\046\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\043\ufff1\045\ufff1\053\ufff1\055\ufff1\064\ufff1\001" +
    "\002\000\036\002\uffd3\004\106\012\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\045" +
    "\uffd3\053\uffd3\064\uffd3\001\002\000\034\002\uffd4\012\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\043\uffd4\045\uffd4\053\uffd4\064\uffd4\001\002\000\034" +
    "\002\uffd5\012\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\043\uffd5\045\uffd5\053\uffd5\064\uffd5" +
    "\001\002\000\006\015\015\025\114\001\002\000\006\015" +
    "\015\025\114\001\002\000\006\015\015\025\114\001\002" +
    "\000\020\002\uffb4\004\uffb4\007\uffb4\010\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\001\002\000\020\002\uffb2\004\uffb2\007\uffb2" +
    "\010\uffb2\061\uffb2\062\uffb2\063\uffb2\001\002\000\020\002" +
    "\uffb3\004\uffb3\007\uffb3\010\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\001\002\000\020\002\uffb5\004\uffb5\007\uffb5\010\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\001\002\000\004\002\001\001\002" +
    "\000\012\002\uffe3\004\uffe3\007\uffe3\010\uffe3\001\002\000" +
    "\006\005\066\053\070\001\002\000\034\011\016\015\015" +
    "\017\014\020\021\021\050\022\004\023\043\025\032\026" +
    "\024\027\013\030\052\031\010\045\075\001\002\000\014" +
    "\002\uffef\012\uffef\034\uffef\036\uffef\043\uffef\001\002\000" +
    "\004\004\125\001\002\000\032\002\uffd2\012\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\043" +
    "\uffd2\045\uffd2\064\uffd2\001\002\000\004\045\132\001\002" +
    "\000\004\045\130\001\002\000\004\004\131\001\002\000" +
    "\032\002\uffc7\012\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\043\uffc7\045\uffc7\064\uffc7\001" +
    "\002\000\004\004\133\001\002\000\032\002\uffc6\012\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\043\uffc6\045\uffc6\064\uffc6\001\002\000\014\002\uffe6" +
    "\012\uffe6\034\uffe6\036\uffe6\043\uffe6\001\002\000\004\006" +
    "\136\001\002\000\004\045\137\001\002\000\004\005\151" +
    "\001\002\000\004\007\141\001\002\000\004\011\142\001" +
    "\002\000\022\012\uffe4\032\055\033\030\035\026\037\020" +
    "\040\045\045\121\064\034\001\002\000\004\012\144\001" +
    "\002\000\006\004\ufffa\005\146\001\002\000\004\004\150" +
    "\001\002\000\020\020\104\021\050\022\004\026\024\027" +
    "\013\030\052\031\010\001\002\000\004\004\ufffb\001\002" +
    "\000\004\002\ufffc\001\002\000\020\020\104\021\050\022" +
    "\004\026\024\027\013\030\052\031\010\001\002\000\006" +
    "\007\ufff7\010\153\001\002\000\004\045\137\001\002\000" +
    "\004\007\ufff9\001\002\000\004\007\ufff8\001\002\000\004" +
    "\004\160\001\002\000\032\002\uffbf\012\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\043\uffbf" +
    "\045\uffbf\064\uffbf\001\002\000\032\002\uffbe\012\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\043\uffbe\045\uffbe\064\uffbe\001\002\000\014\002\uffe8\012" +
    "\uffe8\034\uffe8\036\uffe8\043\uffe8\001\002\000\004\023\171" +
    "\001\002\000\004\023\170\001\002\000\004\023\167\001" +
    "\002\000\004\023\166\001\002\000\012\002\uffbb\004\uffbb" +
    "\007\uffbb\010\uffbb\001\002\000\012\002\uffb8\004\uffb8\007" +
    "\uffb8\010\uffb8\001\002\000\012\002\uffba\004\uffba\007\uffba" +
    "\010\uffba\001\002\000\012\002\uffbc\004\uffbc\007\uffbc\010" +
    "\uffbc\001\002\000\014\002\uffec\012\uffec\034\uffec\036\uffec" +
    "\043\uffec\001\002\000\004\011\016\001\002\000\012\002" +
    "\uffb1\004\uffb1\007\uffb1\010\uffb1\001\002\000\012\002\uffb0" +
    "\004\uffb0\007\uffb0\010\uffb0\001\002\000\014\002\uffea\012" +
    "\uffea\034\uffea\036\uffea\043\uffea\001\002\000\032\002\uffac" +
    "\012\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\043\uffac\045\uffac\064\uffac\001\002\000\004" +
    "\004\201\001\002\000\032\002\uffab\012\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\043\uffab" +
    "\045\uffab\064\uffab\001\002\000\014\002\uffe9\012\uffe9\034" +
    "\uffe9\036\uffe9\043\uffe9\001\002\000\034\011\016\015\015" +
    "\017\014\020\021\021\050\022\004\023\043\025\032\026" +
    "\024\027\013\030\052\031\010\045\075\001\002\000\004" +
    "\007\205\001\002\000\004\042\206\001\002\000\024\032" +
    "\055\033\030\034\uffe4\035\026\037\020\040\045\043\uffe4" +
    "\045\121\064\034\001\002\000\006\034\210\043\211\001" +
    "\002\000\032\002\uffc0\012\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\043\uffc0\045\uffc0\064" +
    "\uffc0\001\002\000\022\032\055\033\030\034\uffe4\035\026" +
    "\037\020\040\045\045\121\064\034\001\002\000\004\034" +
    "\213\001\002\000\032\002\uffc1\012\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\043\uffc1\045" +
    "\uffc1\064\uffc1\001\002\000\022\012\uffe4\032\055\033\030" +
    "\035\026\037\020\040\045\045\121\064\034\001\002\000" +
    "\004\012\216\001\002\000\004\004\217\001\002\000\004" +
    "\002\uffad\001\002\000\004\036\221\001\002\000\032\002" +
    "\uffbd\012\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\043\uffbd\045\uffbd\064\uffbd\001\002\000" +
    "\014\002\uffee\012\uffee\034\uffee\036\uffee\043\uffee\001\002" +
    "\000\014\002\uffe5\012\uffe5\034\uffe5\036\uffe5\043\uffe5\001" +
    "\002\000\014\002\uffe7\012\uffe7\034\uffe7\036\uffe7\043\uffe7" +
    "\001\002\000\004\020\230\001\002\000\004\020\227\001" +
    "\002\000\012\002\uffb7\004\uffb7\007\uffb7\010\uffb7\001\002" +
    "\000\012\002\uffb9\004\uffb9\007\uffb9\010\uffb9\001\002\000" +
    "\004\011\232\001\002\000\004\045\234\001\002\000\004" +
    "\012\244\001\002\000\004\005\235\001\002\000\022\020" +
    "\104\021\050\022\004\026\024\027\013\030\052\031\010" +
    "\045\236\001\002\000\006\010\241\012\uffc8\001\002\000" +
    "\006\010\241\012\uffc8\001\002\000\004\012\uffca\001\002" +
    "\000\004\045\234\001\002\000\004\012\uffc9\001\002\000" +
    "\004\012\uffcb\001\002\000\004\004\245\001\002\000\032" +
    "\002\uffcc\012\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\043\uffcc\045\uffcc\064\uffcc\001\002" +
    "\000\014\002\uffeb\012\uffeb\034\uffeb\036\uffeb\043\uffeb\001" +
    "\002\000\004\012\255\001\002\000\004\005\251\001\002" +
    "\000\020\020\104\021\050\022\004\026\024\027\013\030" +
    "\052\031\010\001\002\000\004\010\253\001\002\000\022" +
    "\012\uffcd\020\104\021\050\022\004\026\024\027\013\030" +
    "\052\031\010\001\002\000\004\012\uffce\001\002\000\012" +
    "\002\uffcf\004\uffcf\007\uffcf\010\uffcf\001\002\000\020\002" +
    "\uffb6\004\uffb6\007\uffb6\010\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\001\002\000\014\002\uffed\012\uffed\034\uffed\036\uffed\043" +
    "\uffed\001\002\000\022\020\104\021\050\022\004\026\024" +
    "\027\013\030\052\031\010\045\261\001\002\000\004\055" +
    "\264\001\002\000\004\055\263\001\002\000\050\002\uffaf" +
    "\004\uffaf\005\uffaf\007\uffaf\010\uffaf\012\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\053\uffaf\055\uffaf\064\uffaf\001\002\000" +
    "\050\002\uffae\004\uffae\005\uffae\007\uffae\010\uffae\012\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\043\uffae\044\uffae\045\uffae\053\uffae\055\uffae\064\uffae" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\074\002\011\004\056\005\030\006\024\007" +
    "\040\010\021\012\050\015\004\017\016\020\034\021\005" +
    "\022\032\023\057\024\006\025\062\026\055\030\046\031" +
    "\035\033\052\036\041\037\060\040\063\041\036\042\043" +
    "\043\053\045\010\046\061\051\037\052\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\256\004\056" +
    "\006\024\007\040\010\021\012\050\017\016\020\034\021" +
    "\005\022\032\042\043\052\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\255\001\001" +
    "\000\010\034\246\041\247\051\037\001\001\000\032\002" +
    "\245\004\056\006\024\007\040\010\021\012\050\017\016" +
    "\020\034\021\005\022\032\042\043\052\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\223\004\056" +
    "\006\024\007\040\010\021\012\050\017\016\020\034\021" +
    "\005\022\032\042\043\052\022\001\001\000\032\002\222" +
    "\004\056\006\024\007\040\010\021\012\050\017\016\020" +
    "\034\021\005\022\032\042\043\052\022\001\001\000\002" +
    "\001\001\000\032\002\221\004\056\006\024\007\040\010" +
    "\021\012\050\017\016\020\034\021\005\022\032\042\043" +
    "\052\022\001\001\000\032\002\217\004\056\006\024\007" +
    "\040\010\021\012\050\017\016\020\034\021\005\022\032" +
    "\042\043\052\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\201" +
    "\004\056\006\024\007\040\010\021\012\050\017\016\020" +
    "\034\021\005\022\032\042\043\052\022\001\001\000\036" +
    "\005\177\023\057\024\006\025\062\026\055\030\046\031" +
    "\035\033\052\036\041\037\060\040\063\041\036\043\053" +
    "\051\037\001\001\000\032\002\175\004\056\006\024\007" +
    "\040\010\021\012\050\017\016\020\034\021\005\022\032" +
    "\042\043\052\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\171\004\056\006\024" +
    "\007\040\010\021\012\050\017\016\020\034\021\005\022" +
    "\032\042\043\052\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\160\004\056\006\024\007\040\010" +
    "\021\012\050\017\016\020\034\021\005\022\032\042\043" +
    "\052\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\133\004\056" +
    "\006\024\007\040\010\021\012\050\017\016\020\034\021" +
    "\005\022\032\042\043\052\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\126\051" +
    "\037\001\001\000\002\001\001\000\032\002\122\004\056" +
    "\006\024\007\040\010\021\012\050\017\016\020\034\021" +
    "\005\022\032\042\043\052\022\001\001\000\002\001\001" +
    "\000\036\005\117\023\057\024\006\025\062\026\055\030" +
    "\046\031\035\033\052\036\041\037\060\040\063\041\036" +
    "\043\053\051\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\104" +
    "\051\037\001\001\000\040\005\075\023\057\024\006\025" +
    "\062\026\055\030\046\031\035\033\052\036\041\037\060" +
    "\040\063\041\036\043\053\044\076\051\037\001\001\000" +
    "\036\005\071\023\057\024\006\025\062\026\055\030\046" +
    "\031\035\033\052\036\041\037\060\040\063\041\036\043" +
    "\053\051\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\075\023\057\024\006\025\062\026" +
    "\055\030\046\031\035\033\052\036\041\037\060\040\063" +
    "\041\036\043\053\044\102\051\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\115\001\001\000" +
    "\004\025\114\001\001\000\004\025\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\123\023\057\024\006\025\062\026\055\030" +
    "\046\031\035\033\052\036\041\037\060\040\063\041\036" +
    "\043\053\051\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\142\004\056\006\024\007\040" +
    "\010\021\012\050\017\016\020\034\021\005\022\032\042" +
    "\043\052\022\001\001\000\002\001\001\000\004\016\144" +
    "\001\001\000\002\001\001\000\006\041\146\051\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\151" +
    "\051\037\001\001\000\004\014\153\001\001\000\004\013" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\173\033\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\203\023" +
    "\057\024\006\025\062\026\055\030\046\031\035\033\052" +
    "\036\041\037\060\040\063\041\036\043\053\051\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\206" +
    "\004\056\006\024\007\040\010\021\012\050\017\016\020" +
    "\034\021\005\022\032\042\043\052\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\211\004\056\006" +
    "\024\007\040\010\021\012\050\017\016\020\034\021\005" +
    "\022\032\042\043\052\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\214\004\056\006\024\007\040" +
    "\010\021\012\050\017\016\020\034\021\005\022\032\042" +
    "\043\052\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\236\051\037\001" +
    "\001\000\004\050\242\001\001\000\004\050\237\001\001" +
    "\000\002\001\001\000\004\011\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\251\051\037\001\001\000\002\001\001\000\010" +
    "\034\253\041\247\051\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\261\051\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initial ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // initial ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL statements RCURL returnType SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // returnType ::= COLON data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // returnType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= IDENTIFIER COLON data_type parameterTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameterTail ::= COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameterTail ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_type ::= DICT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= declaration statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= declaration_assignment statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements ::= break_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= dictionary_binding statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements ::= if_else_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements ::= loop_statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= return_ statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= typeDefinition statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= alias statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= data expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= sequenceSlicing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // data ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // data ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // data ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= IDENTIFIER COLON data_type dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration_assignment ::= declaration COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= IDENTIFIER COLONEQ IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= IDENTIFIER COLONEQ expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dictionary ::= LCURL dict_element RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dict_element ::= data_type COLON data_type COMMA dict_element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dict_element ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefinition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // objectArray ::= IDENTIFIER COLON IDENTIFIER arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // objectArray ::= IDENTIFIER COLON data_type arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objectArray",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arr ::= COMMA objectArray 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // alias ::= ALIAS data_type IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // alias ::= ALIAS IDENTIFIER IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_call ::= IDENTIFIER LPAREN params RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // params ::= expression COMMA params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // params ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // break_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // break_statement ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // loop_statement ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparison ::= NUMBER LT NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparison ::= NUMBER LTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // equality ::= NUMBER EQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // equality ::= BOOL EQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // equality ::= NUMBER NOTEQ NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // equality ::= BOOL NOTEQ BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean_operations ::= NOT boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolean_operations ::= boolean_operations AND boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolean_operations ::= boolean_operations OR boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolean_operations ::= boolean_operations IMPLY boolean_operations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolean_operations ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operations",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // in ::= data_type IN sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // in ::= data_type IN dictionary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // seq ::= SEQ LT data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // seq ::= SEQ LT IDENTIFIER GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // main ::= MAIN LCURL statements RCURL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return_ ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return_ ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dict ::= DICT LT data_type COMMA data_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
