//Package and import declarations
import java_cup.runtime.*;




// //User code components (Linking with the lexer)

// parser code {:
//     // Connect this parser to a scanner!
//     scanner s;
//     Parser(scanner s){ this.s=s; }
// :}

// //  define how to connect to the scanner!
// init with {: s.init(); :};
// scan with {: return s.next_token(); :};

parser code  {:
  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
  	  syntaxErrors = true;
      report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
      }
:};



//Symbols (Terminal and non-terminal lists)

terminal SEMI, COLON, LPAREN, RPAREN, COMMA, LCURL, RCURL, LBRACKET, RBRACKET, NOT, COLONCOLON;
terminal CHARACTER, BOOL, DICT, SEQ, NUMBER, TOP, BOOLEAN, RAT, INT, FLOAT, CHAR;
terminal ALIAS, IF, FI, LOOP, POOL, TDEF, BREAK, FDEF, THEN, ELSE, IN;
terminal IDENTIFIER;
terminal PLUS,  MINUS, TIMES, DIV, MOD;
terminal COLONEQ, LT, GT, LTEQ, EQ, NOTEQ;
terminal AND, OR, IMPLY;
terminal RETURN, MAIN, READ, PRINT, POW;
terminal QMARK, STRING, DOT;


//DEAL WITH PRINT

non terminal statements, statements_, declaration, expression, declaration_assignment, typeDefinition, objectArray;
non terminal alias, parameter, function, returnType, if_statement, break_statement;
non terminal loop_statement, comparison, equality, boolean_operations, sequence, sequenceTail, operation, concat;
non terminal dictionary, dict_element, seq_element, in, data, sequenceSlicing, data_type, return_, function_call, params, params_;
non terminal main, initial, dec, arr, seq, assignment, dict, program_block, all_data, identifier;
non terminal idiot;
non terminal print_statement, read_statement, decla, statements__;
non terminal readable;
non terminal statementswithbreak__, statementswithbreak_, statementswithbreak, if_statementwithbreak;


//Precedence declaration

precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD, POW;
precedence left NOT, AND, OR, IMPLY;
precedence left EQ, NOTEQ, LTEQ, LT;
precedence left LPAREN, RPAREN, DOT;





start with initial;

initial ::= program_block main program_block;


program_block ::= statements | ;



function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL statements RCURL returnType SEMI; ////do we need to consider space?

returnType ::= COLON data_type
                | ;

parameter ::= IDENTIFIER COLON data_type COMMA parameter| IDENTIFIER COLON data_type|;


data_type ::= seq
          | dict
          | INT
          | FLOAT
          | RAT
          | BOOL
          | CHAR
          | TOP ;//dict might be an issue

statements__ ::= if_statement
            | loop_statement
            | return_
            | typeDefinition
            | print_statement
            | alias
            | assignment
            | function_call SEMI
            | function
	    | read_statement;

decla ::= declaration
	   | declaration_assignment;

statements_ ::= statements__ statements_ | statements__ ;

statements ::= decla | decla statements | statements_;

statementswithbreak__ ::= break_statement
            | if_statementwithbreak
            | loop_statement
            | return_
            | typeDefinition
            | print_statement
            | alias
            | assignment
            | function_call SEMI
            | function
	    | read_statement;
statementswithbreak_ ::= statementswithbreak__ statementswithbreak_ | statementswithbreak__ ;
statementswithbreak ::= decla | decla statementswithbreak| statementswithbreak_;
if_statementwithbreak ::= IF LPAREN expression RPAREN THEN statementswithbreak ELSE statements FI
                  | IF LPAREN expression RPAREN THEN statementswithbreak FI;



print_statement ::= PRINT expression SEMI;
read_statement ::= READ readable SEMI;

expression ::= NUMBER 
        | CHARACTER 
        | BOOLEAN //an ambiguity can be assigning empty to a variable? what would happern?
        | operation
        | identifier
        | comparison
        | dictionary
        | sequence
        | equality
        | boolean_operations
        | in
        | concat
        | MINUS expression
        | LPAREN expression RPAREN;

identifier ::= IDENTIFIER
          | function_call
          | sequenceSlicing
          | STRING
          | identifier DOT identifier
          | identifier LBRACKET expression RBRACKET;


readable ::= IDENTIFIER
        | readable DOT readable
        | readable LBRACKET expression RBRACKET;

sequenceSlicing ::= identifier LBRACKET sequenceTail RBRACKET;
sequenceTail ::= expression COLON expression
             | expression COLON
             | COLON expression
             | COLON;


declaration ::= IDENTIFIER COLON data_type dec | IDENTIFIER COLON IDENTIFIER dec;
dec::= SEMI |;  //we should add this to ambiguities that we can assign functions in declarations

declaration_assignment ::= declaration COLONEQ all_data SEMI;
all_data ::= expression | expression COMMA all_data;

assignment ::= readable COLONEQ expression SEMI; //define data imo the data should be passed from the lexer
dictionary ::= LCURL dict_element RCURL;
dict_element ::= data_type COLON data_type COMMA dict_element
   	     | ;

sequence ::=  LBRACKET seq_element RBRACKET; ///[2]
seq_element ::= expression COMMA seq_element | expression |;


typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI;

objectArray ::= IDENTIFIER COLON IDENTIFIER arr
             | IDENTIFIER COLON data_type arr;

arr ::= COMMA objectArray
    |;

alias ::= ALIAS data_type IDENTIFIER SEMI
      | ALIAS IDENTIFIER IDENTIFIER SEMI ;

// // //function declaration
// // //fucntion use

function_call ::= QMARK expression QMARK IDENTIFIER LPAREN params RPAREN;

params_ ::= expression COMMA params_
       | expression;

params ::= params_ | ;

if_statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI
             | IF LPAREN expression RPAREN THEN statements FI;


break_statement ::= BREAK SEMI
                | BREAK NUMBER SEMI;   //the ambiguity here is that when break is outside the loop how would we realize

loop_statement ::= LOOP statementswithbreak POOL;



comparison ::= expression LT expression
	    | expression LTEQ expression ;



equality ::= expression EQ expression
          | expression NOTEQ expression;

// // //We need to think about this case bool a = 2

boolean_operations ::= NOT expression
            | expression AND expression
	    | expression OR expression
	    | expression IMPLY expression
	    ;


in ::= expression IN dictionary | expression IN idiot;
/*a.b.c.name[1:2].foo.bar.name[1]*/


concat ::= idiot COLONCOLON idiot
        | idiot COLONCOLON concat;

idiot ::= sequence | identifier;


seq ::= SEQ LT data_type GT
     | SEQ LT IDENTIFIER GT;

main ::= MAIN LCURL statements RCURL SEMI;

return_ ::= RETURN SEMI
        | RETURN expression SEMI;


dict ::= DICT LT data_type COMMA data_type GT;

// //one of the amguities is + coming before negative numbers

operation  ::= expression PLUS expression
	      | expression MINUS expression
	      | expression TIMES expression
	      | expression DIV expression
	      | expression MOD expression
	      | expression POW expression;
