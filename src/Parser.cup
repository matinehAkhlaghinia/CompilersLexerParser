//Package and import declerations
import java_cup.runtime.*;




//User code components (Linking with the lexer)

// parser code {:
//     // Connect this parser to a scanner!
//     scanner s;
//     Parser(scanner s){ this.s=s; }
// :}

//  define how to connect to the scanner! 
// init with {: s.init(); :};
// scan with {: return s.next_token(); :};




//Symbols (Terminal and non-terminal lists)

terminal SEMI, COLON, PLUS,  MINUS, TIMES, DIVIDE, LPAREN, RPAREN, CHARACTER, IDENTIFIER, BOOL, DICT, SEQ, TDEF, IF, LOOP, FI, POOL, TOP, LCURL, RCURL, ASSIGN_EQUAL, PUNC, DATATYPE, NUMBER, ALIAS
, FDEF, THEN, ELSE, BREAK, LBRACKET, RBRACKET, EXCLAM, AND, OR, IMPLY, SMALLER, SMALLER_EQ, EQUAL, NOTEQUAL

non-terminal expr



//Precedence declaration

precedence left PLUS, MINUS;



//Grammar (context-free)

//number ::= FLOAT | RAT | INT

statements ::= declaration | decleration_assignment | break_statement | .... ///the body of the functions

body ::= body statements | 


declaration ::= IDENTIFIER COLON DATATYPE SEMI

expression ::= DATA | function | operation | comparison | IDENTIFIER       //we should add this to ambiguities that we can assign functions in declerations

decleration_assignment ::= declaration ASSIGN_EQUAL expression //define data imo the data should be passed from the lexer 

dictionary_binding ::= IDENTIFIER LBRACKET expression RBRACKET COLON ASSIGN_EQUAL expression
//d[k] := v


typeDefinition ::= TDEF IDENTIFIER LCURL objectArray RCURL SEMI
objectArray ::= IDENTIFIER COLON DATATYPE PUNC objectArray | IDENTIFIER COLON dataType SEMI


alias ::= ALIAS DATATYPE IDENTIFIER SEMI | ALIAS IDENTIFIER IDENTIFIER SEMI


parameter ::= DATATYPE IDENTIFIER parameterTail 

parameterTail ::= PUNC parameter | 


function ::= FDEF IDENTIFIER LPAREN parameter RPAREN LCURL body RCURL returnType SEMI ////do we need to consider space?

returnType ::= COLON DATATYPE |


if_statement ::= IF LPAREN expression RPAREN THEN body if_else_statement FI

if_else_statement ::= ELSE body |


break_statement ::= BREAK | BREAK NUMBER   //the ambiguity here is that when break is outside the loop how would we realize
loop_statement ::= LOOP body POOL

comparison ::= NUMBER SMALLER NUMBER
 		   |
 		   NUMBER SMALLER_EQ NUMBER
 		   

equality ::= NUMBER EQUAL NUMBER
		 | BOOL EQUAL BOOL
		 | NUMBER NOTEQUAL NUMBER
		 | BOOL NOTEQUAL BOOL


//We need to think about this case bool a = 2
boolean_operations ::= EXCLAM expression 
		   		   | 
		   		   expression AND expression
		           | 
		           expression OR expression
		           | 
		           expression IMPLY expression

s[i:j], s[i:], s[:i]

sequence ::= IDENTIFIER LBRACKET IDENTIFIER

operation  ::= operation PLUS operation   
	      |
	      operation MINUS operation   
	      | 
          operation TIMES operation 
	      | 
	      operation DIVIDE operation 
	      | 
          operation MOD operation 
	      | 
          NUMBER                  
	      | 
          MINUS operation             
	      | 
          LPAREN operation RPAREN